
7SegmentCalculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d4  080047d4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080047d4  080047d4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047d4  080047d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080047dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000004ec  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000500  20000500  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172c6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002811  00000000  00000000  0003730a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  00039b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  0003ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebc5  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176c3  00000000  00000000  0005ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc773  00000000  00000000  000722e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ea53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052cc  00000000  00000000  0012eaa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004758 	.word	0x08004758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004758 	.word	0x08004758

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fec8 	bl	8000f70 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_SYSTICK_Config(SystemCoreClock / (1000U / 1));
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <main+0x48>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <main+0x4c>)
 80001e6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ea:	099b      	lsrs	r3, r3, #6
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 f84e 	bl	800128e <HAL_SYSTICK_Config>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f81d 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f9eb 	bl	80005d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001fa:	f000 f87d 	bl	80002f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001fe:	f000 f8bb 	bl	8000378 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000202:	f000 f9c3 	bl	800058c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000206:	f000 f8f5 	bl	80003f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800020a:	f000 f941 	bl	8000490 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800020e:	f000 f98d 	bl	800052c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000212:	4805      	ldr	r0, [pc, #20]	; (8000228 <main+0x50>)
 8000214:	f003 f928 	bl	8003468 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <main+0x54>)
 800021a:	f003 f925 	bl	8003468 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	e7fe      	b.n	800021e <main+0x46>
 8000220:	20000008 	.word	0x20000008
 8000224:	10624dd3 	.word	0x10624dd3
 8000228:	2000012c 	.word	0x2000012c
 800022c:	200000e0 	.word	0x200000e0

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b09e      	sub	sp, #120	; 0x78
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 fa40 	bl	80046c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	223c      	movs	r2, #60	; 0x3c
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f004 fa32 	bl	80046c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000260:	2303      	movs	r3, #3
 8000262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000264:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000268:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2310      	movs	r3, #16
 8000274:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000280:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000284:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fbc6 	bl	8001a1c <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000296:	f000 fa6b 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002b4:	2101      	movs	r1, #1
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fbee 	bl	8002a98 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002c2:	f000 fa55 	bl	8000770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <SystemClock_Config+0xc4>)
 80002c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fe12 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002e6:	f000 fa43 	bl	8000770 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3778      	adds	r7, #120	; 0x78
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	00020022 	.word	0x00020022

080002f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <MX_I2C1_Init+0x74>)
 80002fe:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <MX_I2C1_Init+0x78>)
 8000300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000302:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_I2C1_Init+0x74>)
 8000304:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <MX_I2C1_Init+0x7c>)
 8000306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_I2C1_Init+0x74>)
 8000310:	2201      	movs	r2, #1
 8000312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_I2C1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_I2C1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000332:	480e      	ldr	r0, [pc, #56]	; (800036c <MX_I2C1_Init+0x74>)
 8000334:	f001 f96d 	bl	8001612 <HAL_I2C_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800033e:	f000 fa17 	bl	8000770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000342:	2100      	movs	r1, #0
 8000344:	4809      	ldr	r0, [pc, #36]	; (800036c <MX_I2C1_Init+0x74>)
 8000346:	f001 f9f3 	bl	8001730 <HAL_I2CEx_ConfigAnalogFilter>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000350:	f000 fa0e 	bl	8000770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000354:	2100      	movs	r1, #0
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_I2C1_Init+0x74>)
 8000358:	f001 fa35 	bl	80017c6 <HAL_I2CEx_ConfigDigitalFilter>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000362:	f000 fa05 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000030 	.word	0x20000030
 8000370:	40005400 	.word	0x40005400
 8000374:	2000090e 	.word	0x2000090e

08000378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_SPI1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_SPI1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_SPI1_Init+0x74>)
 8000384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_SPI1_Init+0x74>)
 8000392:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_SPI1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_SPI1_Init+0x74>)
 80003a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_SPI1_Init+0x74>)
 80003ae:	2208      	movs	r2, #8
 80003b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_SPI1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_SPI1_Init+0x74>)
 80003c6:	2207      	movs	r2, #7
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_SPI1_Init+0x74>)
 80003d2:	2208      	movs	r2, #8
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_SPI1_Init+0x74>)
 80003d8:	f002 ff44 	bl	8003264 <HAL_SPI_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f9c5 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000007c 	.word	0x2000007c
 80003f0:	40013000 	.word	0x40013000

080003f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_TIM2_Init+0x98>)
 8000414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_TIM2_Init+0x98>)
 800041c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_TIM2_Init+0x98>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_TIM2_Init+0x98>)
 800042a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800042e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_TIM2_Init+0x98>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_TIM2_Init+0x98>)
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800043c:	4813      	ldr	r0, [pc, #76]	; (800048c <MX_TIM2_Init+0x98>)
 800043e:	f002 ffbc 	bl	80033ba <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000448:	f000 f992 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_TIM2_Init+0x98>)
 800045a:	f003 f98e 	bl	800377a <HAL_TIM_ConfigClockSource>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000464:	f000 f984 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_TIM2_Init+0x98>)
 8000476:	f003 fba5 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000480:	f000 f976 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200000e0 	.word	0x200000e0

08000490 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_TIM4_Init+0x94>)
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <MX_TIM4_Init+0x98>)
 80004b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_TIM4_Init+0x94>)
 80004b6:	228f      	movs	r2, #143	; 0x8f
 80004b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_TIM4_Init+0x94>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_TIM4_Init+0x94>)
 80004c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_TIM4_Init+0x94>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_TIM4_Init+0x94>)
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_TIM4_Init+0x94>)
 80004d6:	f002 ff70 	bl	80033ba <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80004e0:	f000 f946 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <MX_TIM4_Init+0x94>)
 80004f2:	f003 f942 	bl	800377a <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80004fc:	f000 f938 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_TIM4_Init+0x94>)
 800050e:	f003 fb59 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000518:	f000 f92a 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000012c 	.word	0x2000012c
 8000528:	40000800 	.word	0x40000800

0800052c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <MX_USART2_UART_Init+0x5c>)
 8000534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800053c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x58>)
 8000570:	f003 fbc6 	bl	8003d00 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800057a:	f000 f8f9 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000178 	.word	0x20000178
 8000588:	40004400 	.word	0x40004400

0800058c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <MX_USB_PCD_Init+0x40>)
 8000594:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 8000598:	2208      	movs	r2, #8
 800059a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 800059e:	2202      	movs	r2, #2
 80005a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_USB_PCD_Init+0x3c>)
 80005b6:	f001 f952 	bl	800185e <HAL_PCD_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005c0:	f000 f8d6 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001fc 	.word	0x200001fc
 80005cc:	40005c00 	.word	0x40005c00

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <MX_GPIO_Init+0x190>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a5d      	ldr	r2, [pc, #372]	; (8000760 <MX_GPIO_Init+0x190>)
 80005ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <MX_GPIO_Init+0x190>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <MX_GPIO_Init+0x190>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a57      	ldr	r2, [pc, #348]	; (8000760 <MX_GPIO_Init+0x190>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b55      	ldr	r3, [pc, #340]	; (8000760 <MX_GPIO_Init+0x190>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b52      	ldr	r3, [pc, #328]	; (8000760 <MX_GPIO_Init+0x190>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a51      	ldr	r2, [pc, #324]	; (8000760 <MX_GPIO_Init+0x190>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <MX_GPIO_Init+0x190>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <MX_GPIO_Init+0x190>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a4b      	ldr	r2, [pc, #300]	; (8000760 <MX_GPIO_Init+0x190>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <MX_GPIO_Init+0x190>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	4b46      	ldr	r3, [pc, #280]	; (8000760 <MX_GPIO_Init+0x190>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a45      	ldr	r2, [pc, #276]	; (8000760 <MX_GPIO_Init+0x190>)
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <MX_GPIO_Init+0x190>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b40      	ldr	r3, [pc, #256]	; (8000760 <MX_GPIO_Init+0x190>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a3f      	ldr	r2, [pc, #252]	; (8000760 <MX_GPIO_Init+0x190>)
 8000664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <MX_GPIO_Init+0x190>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000676:	2200      	movs	r2, #0
 8000678:	f64f 7108 	movw	r1, #65288	; 0xff08
 800067c:	4839      	ldr	r0, [pc, #228]	; (8000764 <MX_GPIO_Init+0x194>)
 800067e:	f000 ff8d 	bl	800159c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	210f      	movs	r1, #15
 8000686:	4838      	ldr	r0, [pc, #224]	; (8000768 <MX_GPIO_Init+0x198>)
 8000688:	f000 ff88 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000692:	4836      	ldr	r0, [pc, #216]	; (800076c <MX_GPIO_Init+0x19c>)
 8000694:	f000 ff82 	bl	800159c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000698:	f64f 7308 	movw	r3, #65288	; 0xff08
 800069c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	482c      	ldr	r0, [pc, #176]	; (8000764 <MX_GPIO_Init+0x194>)
 80006b2:	f000 fdf9 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80006b6:	2330      	movs	r3, #48	; 0x30
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <MX_GPIO_Init+0x194>)
 80006cc:	f000 fdec 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006d0:	230f      	movs	r3, #15
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4820      	ldr	r0, [pc, #128]	; (8000768 <MX_GPIO_Init+0x198>)
 80006e8:	f000 fdde 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006ec:	2307      	movs	r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f6:	2302      	movs	r3, #2
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f000 fdd0 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000708:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800070c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_GPIO_Init+0x19c>)
 8000722:	f000 fdc1 	bl	80012a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	2006      	movs	r0, #6
 800072c:	f000 fd85 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fd9e 	bl	8001272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2101      	movs	r1, #1
 800073a:	2007      	movs	r0, #7
 800073c:	f000 fd7d 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000740:	2007      	movs	r0, #7
 8000742:	f000 fd96 	bl	8001272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	2008      	movs	r0, #8
 800074c:	f000 fd75 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000750:	2008      	movs	r0, #8
 8000752:	f000 fd8e 	bl	8001272 <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48001000 	.word	0x48001000
 8000768:	48000800 	.word	0x48000800
 800076c:	48000c00 	.word	0x48000c00

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007b2:	2005      	movs	r0, #5
 80007b4:	f000 fd36 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x7c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d127      	bne.n	8000836 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	2312      	movs	r3, #18
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000806:	2301      	movs	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080e:	2304      	movs	r3, #4
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <HAL_I2C_MspInit+0x84>)
 800081a:	f000 fd45 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_I2C_MspInit+0x80>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40005400 	.word	0x40005400
 8000844:	40021000 	.word	0x40021000
 8000848:	48000400 	.word	0x48000400

0800084c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d128      	bne.n	80008c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_SPI_MspInit+0x80>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_SPI_MspInit+0x80>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_SPI_MspInit+0x80>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800089e:	23e0      	movs	r3, #224	; 0xe0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ae:	2305      	movs	r3, #5
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fcf4 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e0:	d114      	bne.n	800090c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	201c      	movs	r0, #28
 8000900:	f000 fc9b 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000904:	201c      	movs	r0, #28
 8000906:	f000 fcb4 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800090a:	e018      	b.n	800093e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_TIM_Base_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d113      	bne.n	800093e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_TIM_Base_MspInit+0x78>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	201e      	movs	r0, #30
 8000934:	f000 fc81 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000938:	201e      	movs	r0, #30
 800093a:	f000 fc9a 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	40000800 	.word	0x40000800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d144      	bne.n	80009fc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 80009a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0xb8>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ba:	2308      	movs	r3, #8
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f000 fc66 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009dc:	2320      	movs	r3, #32
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0xbc>)
 80009f8:	f000 fc56 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000c00 	.word	0x48000c00

08000a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_PCD_MspInit+0x80>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d129      	bne.n	8000a86 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fc1d 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005c00 	.word	0x40005c00
 8000a94:	40021000 	.word	0x40021000

08000a98 <decToBinary>:
bool isCounting = false;




void decToBinary(int* array, int n) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
    for (int i = 3; i >= 0; i--) {
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e019      	b.n	8000adc <decToBinary+0x44>
        int k = n >> i;
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	fa42 f303 	asr.w	r3, r2, r3
 8000ab0:	60bb      	str	r3, [r7, #8]
        if (k & 1) array[i] = 1;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <decToBinary+0x32>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e005      	b.n	8000ad6 <decToBinary+0x3e>
        else array[i] = 0;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
    for (int i = 3; i >= 0; i--) {
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dae2      	bge.n	8000aa8 <decToBinary+0x10>
    }
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <showNumber>:

void showNumber(int number) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	 int arr[4] = {0};
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
	 decToBinary(arr, number);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffc3 	bl	8000a98 <decToBinary>

	 int bcd_A = arr[0];
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
	 int bcd_B = arr[1];
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	623b      	str	r3, [r7, #32]
	 int bcd_C = arr[2];
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	61fb      	str	r3, [r7, #28]
	 int bcd_D = arr[3];
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	61bb      	str	r3, [r7, #24]

	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, bcd_D);
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	2101      	movs	r1, #1
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <showNumber+0x74>)
 8000b2c:	f000 fd36 	bl	800159c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, bcd_C);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	2102      	movs	r1, #2
 8000b38:	480a      	ldr	r0, [pc, #40]	; (8000b64 <showNumber+0x74>)
 8000b3a:	f000 fd2f 	bl	800159c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, bcd_B);
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	2104      	movs	r1, #4
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <showNumber+0x74>)
 8000b48:	f000 fd28 	bl	800159c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3, bcd_A);
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	2108      	movs	r1, #8
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <showNumber+0x74>)
 8000b56:	f000 fd21 	bl	800159c <HAL_GPIO_WritePin>
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	48000800 	.word	0x48000800

08000b68 <resetAndEnableSegment>:

typedef enum Segment {
	A,B,C,D
} Segment;

void resetAndEnableSegment(Segment segment) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <resetAndEnableSegment+0x74>)
 8000b7a:	f000 fd0f 	bl	800159c <HAL_GPIO_WritePin>

    switch(segment) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d827      	bhi.n	8000bd4 <resetAndEnableSegment+0x6c>
 8000b84:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <resetAndEnableSegment+0x24>)
 8000b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8a:	bf00      	nop
 8000b8c:	08000b9d 	.word	0x08000b9d
 8000b90:	08000bab 	.word	0x08000bab
 8000b94:	08000bb9 	.word	0x08000bb9
 8000b98:	08000bc7 	.word	0x08000bc7
    case A: HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8, 0); break;
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <resetAndEnableSegment+0x74>)
 8000ba4:	f000 fcfa 	bl	800159c <HAL_GPIO_WritePin>
 8000ba8:	e014      	b.n	8000bd4 <resetAndEnableSegment+0x6c>
    case B: HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9, 0); break;
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <resetAndEnableSegment+0x74>)
 8000bb2:	f000 fcf3 	bl	800159c <HAL_GPIO_WritePin>
 8000bb6:	e00d      	b.n	8000bd4 <resetAndEnableSegment+0x6c>
    case C:	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10, 0); break;
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <resetAndEnableSegment+0x74>)
 8000bc0:	f000 fcec 	bl	800159c <HAL_GPIO_WritePin>
 8000bc4:	e006      	b.n	8000bd4 <resetAndEnableSegment+0x6c>
    case D:	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11, 0); break;
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <resetAndEnableSegment+0x74>)
 8000bce:	f000 fce5 	bl	800159c <HAL_GPIO_WritePin>
 8000bd2:	bf00      	nop
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	48000c00 	.word	0x48000c00

08000be0 <updateSegmentStepCounter>:
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, 1);
	HAL_Delay(3);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, 0);
}

void updateSegmentStepCounter() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

    resetAndEnableSegment(A);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff ffbf 	bl	8000b68 <resetAndEnableSegment>
	showNumber(segmentStepCounter);
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <updateSegmentStepCounter+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff7e 	bl	8000af0 <showNumber>
	HAL_Delay(3);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 fa21 	bl	800103c <HAL_Delay>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200004e8 	.word	0x200004e8

08000c04 <updateSegmentCounter>:

void updateSegmentCounter() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

    resetAndEnableSegment(C);
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff ffac 	bl	8000b68 <resetAndEnableSegment>
    int tenDigit = segmentCounter/10;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <updateSegmentCounter+0x5c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <updateSegmentCounter+0x60>)
 8000c16:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1a:	1092      	asrs	r2, r2, #2
 8000c1c:	17db      	asrs	r3, r3, #31
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	607b      	str	r3, [r7, #4]
	showNumber(tenDigit);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff64 	bl	8000af0 <showNumber>

	HAL_Delay(3);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fa07 	bl	800103c <HAL_Delay>
	int oneDigit = segmentCounter%10;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <updateSegmentCounter+0x5c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <updateSegmentCounter+0x60>)
 8000c34:	fb83 1302 	smull	r1, r3, r3, r2
 8000c38:	1099      	asrs	r1, r3, #2
 8000c3a:	17d3      	asrs	r3, r2, #31
 8000c3c:	1ac9      	subs	r1, r1, r3
 8000c3e:	460b      	mov	r3, r1
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	603b      	str	r3, [r7, #0]
	resetAndEnableSegment(D);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff ff8c 	bl	8000b68 <resetAndEnableSegment>
	showNumber(oneDigit);
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f7ff ff4d 	bl	8000af0 <showNumber>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004ec 	.word	0x200004ec
 8000c64:	66666667 	.word	0x66666667

08000c68 <updateUARTStepCounter>:


void updateUARTStepCounter() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

    resetAndEnableSegment(B);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ff7b 	bl	8000b68 <resetAndEnableSegment>
	showNumber(UARTStepCounter);
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <updateUARTStepCounter+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff3a 	bl	8000af0 <showNumber>
	HAL_Delay(3);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f9dd 	bl	800103c <HAL_Delay>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200004f0 	.word	0x200004f0

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f990 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce0:	b598      	push	{r3, r4, r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 fc71 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

	if(isCounting == true) { return; }
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <EXTI0_IRQHandler+0x6c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d027      	beq.n	8000d42 <EXTI0_IRQHandler+0x62>

	if (segmentStepCounterLastPressTime == -1) {
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <EXTI0_IRQHandler+0x70>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfa:	d106      	bne.n	8000d0a <EXTI0_IRQHandler+0x2a>
		segmentStepCounterLastPressTime = HAL_GetTick();
 8000cfc:	f000 f992 	bl	8001024 <HAL_GetTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <EXTI0_IRQHandler+0x70>)
 8000d06:	601a      	str	r2, [r3, #0]
		return;
 8000d08:	e01e      	b.n	8000d48 <EXTI0_IRQHandler+0x68>
	} else {
		if (segmentStepCounterLastPressTime - HAL_GetTick() > 1000) {
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <EXTI0_IRQHandler+0x70>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461c      	mov	r4, r3
 8000d10:	f000 f988 	bl	8001024 <HAL_GetTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	1ae3      	subs	r3, r4, r3
 8000d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1c:	d913      	bls.n	8000d46 <EXTI0_IRQHandler+0x66>
			segmentStepCounterLastPressTime = -1;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <EXTI0_IRQHandler+0x70>)
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d24:	601a      	str	r2, [r3, #0]
		} else {
			return;
		}
	}

	if(segmentStepCounter == 9){
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <EXTI0_IRQHandler+0x74>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b09      	cmp	r3, #9
 8000d2c:	d103      	bne.n	8000d36 <EXTI0_IRQHandler+0x56>
		segmentStepCounter = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <EXTI0_IRQHandler+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e008      	b.n	8000d48 <EXTI0_IRQHandler+0x68>
	} else {
		segmentStepCounter += 1;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <EXTI0_IRQHandler+0x74>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <EXTI0_IRQHandler+0x74>)
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e002      	b.n	8000d48 <EXTI0_IRQHandler+0x68>
	if(isCounting == true) { return; }
 8000d42:	bf00      	nop
 8000d44:	e000      	b.n	8000d48 <EXTI0_IRQHandler+0x68>
			return;
 8000d46:	bf00      	nop
	}

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d48:	bd98      	pop	{r3, r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004f8 	.word	0x200004f8
 8000d50:	20000000 	.word	0x20000000
 8000d54:	200004e8 	.word	0x200004e8

08000d58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d58:	b598      	push	{r3, r4, r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if(isCounting == true) { return; }
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <EXTI1_IRQHandler+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d02a      	beq.n	8000dba <EXTI1_IRQHandler+0x62>


	if (UARTStepCounterLastPressTime == -1) {
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <EXTI1_IRQHandler+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d6c:	d106      	bne.n	8000d7c <EXTI1_IRQHandler+0x24>
		UARTStepCounterLastPressTime = HAL_GetTick();
 8000d6e:	f000 f959 	bl	8001024 <HAL_GetTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <EXTI1_IRQHandler+0x70>)
 8000d78:	601a      	str	r2, [r3, #0]
		return;
 8000d7a:	e021      	b.n	8000dc0 <EXTI1_IRQHandler+0x68>
	} else {
		if (UARTStepCounterLastPressTime - HAL_GetTick() > 1000) {
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <EXTI1_IRQHandler+0x70>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	461c      	mov	r4, r3
 8000d82:	f000 f94f 	bl	8001024 <HAL_GetTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	1ae3      	subs	r3, r4, r3
 8000d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d8e:	d916      	bls.n	8000dbe <EXTI1_IRQHandler+0x66>
			UARTStepCounterLastPressTime = -1;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <EXTI1_IRQHandler+0x70>)
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d96:	601a      	str	r2, [r3, #0]
		} else {
			return;
		}
	}

	if(UARTStepCounter == 9){
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <EXTI1_IRQHandler+0x74>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b09      	cmp	r3, #9
 8000d9e:	d103      	bne.n	8000da8 <EXTI1_IRQHandler+0x50>
		UARTStepCounter = 0;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <EXTI1_IRQHandler+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e004      	b.n	8000db2 <EXTI1_IRQHandler+0x5a>
	} else {
		UARTStepCounter += 1;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <EXTI1_IRQHandler+0x74>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <EXTI1_IRQHandler+0x74>)
 8000db0:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000db2:	2002      	movs	r0, #2
 8000db4:	f000 fc0a 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
 8000db8:	e002      	b.n	8000dc0 <EXTI1_IRQHandler+0x68>
	if(isCounting == true) { return; }
 8000dba:	bf00      	nop
 8000dbc:	e000      	b.n	8000dc0 <EXTI1_IRQHandler+0x68>
			return;
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dc0:	bd98      	pop	{r3, r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200004f8 	.word	0x200004f8
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	200004f0 	.word	0x200004f0

08000dd0 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

	if(isCounting == false) { // start counting
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <EXTI2_TSC_IRQHandler+0x2c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <EXTI2_TSC_IRQHandler+0x14>
		isCounting = true;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <EXTI2_TSC_IRQHandler+0x2c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e002      	b.n	8000dea <EXTI2_TSC_IRQHandler+0x1a>
	} else { // stop counting
		isCounting = false;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <EXTI2_TSC_IRQHandler+0x2c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
//		segmentCounter = 0;
//		segmentStepCounter = 0;
//		UARTStepCounter = 0;
//		UARTCounter = 0;
	}
	HAL_Delay(3);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f926 	bl	800103c <HAL_Delay>
  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000df0:	2004      	movs	r0, #4
 8000df2:	f000 fbeb 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200004f8 	.word	0x200004f8

08000e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if(isCounting == false) { return; }
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <TIM2_IRQHandler+0xa8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d047      	beq.n	8000e9e <TIM2_IRQHandler+0x9e>

	if((segmentCounter + segmentStepCounter) >= 99) {
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <TIM2_IRQHandler+0xac>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <TIM2_IRQHandler+0xb0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	2b62      	cmp	r3, #98	; 0x62
 8000e1a:	dd03      	ble.n	8000e24 <TIM2_IRQHandler+0x24>
		segmentCounter = 0;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <TIM2_IRQHandler+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e006      	b.n	8000e32 <TIM2_IRQHandler+0x32>
	} else {
		segmentCounter += segmentStepCounter;
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <TIM2_IRQHandler+0xac>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <TIM2_IRQHandler+0xb0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <TIM2_IRQHandler+0xac>)
 8000e30:	6013      	str	r3, [r2, #0]
	}

	if((UARTCounter + UARTStepCounter) >= 99) {
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <TIM2_IRQHandler+0xb4>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <TIM2_IRQHandler+0xb8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2b62      	cmp	r3, #98	; 0x62
 8000e3e:	dd03      	ble.n	8000e48 <TIM2_IRQHandler+0x48>
		UARTCounter = 0;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <TIM2_IRQHandler+0xb4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e006      	b.n	8000e56 <TIM2_IRQHandler+0x56>
	} else {
		UARTCounter += UARTStepCounter;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <TIM2_IRQHandler+0xb4>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <TIM2_IRQHandler+0xb8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <TIM2_IRQHandler+0xb4>)
 8000e54:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e56:	4819      	ldr	r0, [pc, #100]	; (8000ebc <TIM2_IRQHandler+0xbc>)
 8000e58:	f002 fb70 	bl	800353c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

	unsigned char buffer[8];
	itoa(UARTCounter, buffer, 10);
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <TIM2_IRQHandler+0xb4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4639      	mov	r1, r7
 8000e62:	220a      	movs	r2, #10
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc2b 	bl	80046c0 <itoa>
	strcat(buffer, "\n");
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9ab 	bl	80001c8 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	463b      	mov	r3, r7
 8000e78:	4413      	add	r3, r2
 8000e7a:	4911      	ldr	r1, [pc, #68]	; (8000ec0 <TIM2_IRQHandler+0xc0>)
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	8013      	strh	r3, [r2, #0]

	HAL_UART_Transmit(&huart2, buffer, sizeof(unsigned char) * strlen(buffer), 1000);
 8000e84:	463b      	mov	r3, r7
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f99e 	bl	80001c8 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4639      	mov	r1, r7
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <TIM2_IRQHandler+0xc4>)
 8000e98:	f002 ff80 	bl	8003d9c <HAL_UART_Transmit>
 8000e9c:	e000      	b.n	8000ea0 <TIM2_IRQHandler+0xa0>
	if(isCounting == false) { return; }
 8000e9e:	bf00      	nop
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200004f8 	.word	0x200004f8
 8000eac:	200004ec 	.word	0x200004ec
 8000eb0:	200004e8 	.word	0x200004e8
 8000eb4:	200004f4 	.word	0x200004f4
 8000eb8:	200004f0 	.word	0x200004f0
 8000ebc:	200000e0 	.word	0x200000e0
 8000ec0:	08004770 	.word	0x08004770
 8000ec4:	20000178 	.word	0x20000178

08000ec8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	updateSegmentStepCounter();
 8000ecc:	f7ff fe88 	bl	8000be0 <updateSegmentStepCounter>

	HAL_Delay(3);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8b3 	bl	800103c <HAL_Delay>

	updateSegmentCounter();
 8000ed6:	f7ff fe95 	bl	8000c04 <updateSegmentCounter>

	HAL_Delay(3);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f8ae 	bl	800103c <HAL_Delay>

	updateUARTStepCounter();
 8000ee0:	f7ff fec2 	bl	8000c68 <updateUARTStepCounter>

	HAL_Delay(3);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f8a9 	bl	800103c <HAL_Delay>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM4_IRQHandler+0x2c>)
 8000eec:	f002 fb26 	bl	800353c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000012c 	.word	0x2000012c

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f003 fb7d 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff f943 	bl	80001d8 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f60:	080047dc 	.word	0x080047dc
  ldr r2, =_sbss
 8000f64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f68:	20000500 	.word	0x20000500

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f94f 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fbf6 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f967 	bl	800128e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f92f 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010
 8001020:	200004fc 	.word	0x200004fc

08001024 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;  
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200004fc 	.word	0x200004fc

0800103c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff3e 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff31 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	e154      	b.n	8001562 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8146 	beq.w	800155c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x40>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0203 	and.w	r2, r3, #3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80a0 	beq.w	800155c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_GPIO_Init+0x2d8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_GPIO_Init+0x2d8>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_GPIO_Init+0x2d8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001434:	4a53      	ldr	r2, [pc, #332]	; (8001584 <HAL_GPIO_Init+0x2dc>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145e:	d019      	beq.n	8001494 <HAL_GPIO_Init+0x1ec>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1e8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2e4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1e4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_GPIO_Init+0x2e8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_GPIO_Init+0x2ec>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1dc>
 8001480:	2304      	movs	r3, #4
 8001482:	e008      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001484:	2305      	movs	r3, #5
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001488:	2303      	movs	r3, #3
 800148a:	e004      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 800148c:	2302      	movs	r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001494:	2300      	movs	r3, #0
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4093      	lsls	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a6:	4937      	ldr	r1, [pc, #220]	; (8001584 <HAL_GPIO_Init+0x2dc>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d8:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001502:	4a25      	ldr	r2, [pc, #148]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_GPIO_Init+0x2f0>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	f47f aea3 	bne.w	80012b8 <HAL_GPIO_Init+0x10>
  }
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	48000400 	.word	0x48000400
 800158c:	48000800 	.word	0x48000800
 8001590:	48000c00 	.word	0x48000c00
 8001594:	48001000 	.word	0x48001000
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f806 	bl	80015fc <HAL_GPIO_EXTI_Callback>
  }
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e081      	b.n	8001728 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d106      	bne.n	800163e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff f8c3 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2224      	movs	r2, #36	; 0x24
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001662:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001672:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d107      	bne.n	800168c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e006      	b.n	800169a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001698:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d104      	bne.n	80016ac <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69d9      	ldr	r1, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b20      	cmp	r3, #32
 8001744:	d138      	bne.n	80017b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001750:	2302      	movs	r3, #2
 8001752:	e032      	b.n	80017ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d139      	bne.n	8001850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e033      	b.n	8001852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2224      	movs	r2, #36	; 0x24
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800185e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001860:	b08b      	sub	sp, #44	; 0x2c
 8001862:	af06      	add	r7, sp, #24
 8001864:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0d0      	b.n	8001a12 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff f8c3 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fe99 	bl	80045ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e04c      	b.n	800193c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3301      	adds	r3, #1
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	b298      	uxth	r0, r3
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3336      	adds	r3, #54	; 0x36
 80018e0:	4602      	mov	r2, r0
 80018e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3303      	adds	r3, #3
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3338      	adds	r3, #56	; 0x38
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	333c      	adds	r3, #60	; 0x3c
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3340      	adds	r3, #64	; 0x40
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3ad      	bcc.n	80018a2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e044      	b.n	80019d6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3b5      	bcc.n	800194c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	602b      	str	r3, [r5, #0]
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f002 fe02 	bl	8004604 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f001 b823 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 817d 	beq.w	8001d52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a58:	4bbc      	ldr	r3, [pc, #752]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d00c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a64:	4bb9      	ldr	r3, [pc, #740]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d15c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x10e>
 8001a70:	4bb6      	ldr	r3, [pc, #728]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d155      	bne.n	8001b2a <HAL_RCC_OscConfig+0x10e>
 8001a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a82:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x94>
 8001aaa:	4ba8      	ldr	r3, [pc, #672]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0xc0>
 8001ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001acc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ad8:	4b9c      	ldr	r3, [pc, #624]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ae0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ae4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ae8:	fa92 f2a2 	rbit	r2, r2
 8001aec:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001af0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 811f 	beq.w	8001d50 <HAL_RCC_OscConfig+0x334>
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8116 	bne.w	8001d50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f000 bfaf 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12e>
 8001b3c:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a82      	ldr	r2, [pc, #520]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e036      	b.n	8001bb8 <HAL_RCC_OscConfig+0x19c>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x158>
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7b      	ldr	r2, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a78      	ldr	r2, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e021      	b.n	8001bb8 <HAL_RCC_OscConfig+0x19c>
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x184>
 8001b86:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a70      	ldr	r2, [pc, #448]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6d      	ldr	r2, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x19c>
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a66      	ldr	r2, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	495f      	ldr	r1, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d059      	beq.n	8001c96 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa1f 	bl	8001024 <HAL_GetTick>
 8001be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fa1a 	bl	8001024 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d902      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f000 bf43 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 8001c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c06:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x218>
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e015      	b.n	8001c60 <HAL_RCC_OscConfig+0x244>
 8001c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c38:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c64:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c78:	fab2 f282 	clz	r2, r2
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ab      	beq.n	8001bec <HAL_RCC_OscConfig+0x1d0>
 8001c94:	e05d      	b.n	8001d52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f9c5 	bl	8001024 <HAL_GetTick>
 8001c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f9c0 	bl	8001024 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d902      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	f000 bee9 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 8001cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cba:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2cc>
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e015      	b.n	8001d14 <HAL_RCC_OscConfig+0x2f8>
 8001ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_OscConfig+0x330>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d18:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d20:	fa92 f2a2 	rbit	r2, r2
 8001d24:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d28:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ab      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x284>
 8001d48:	e003      	b.n	8001d52 <HAL_RCC_OscConfig+0x336>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 817d 	beq.w	8002062 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d68:	4ba6      	ldr	r3, [pc, #664]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d74:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d172      	bne.n	8001e66 <HAL_RCC_OscConfig+0x44a>
 8001d80:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d16c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x44a>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3a0>
 8001db6:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c8>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001de0:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2202      	movs	r2, #2
 8001de6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dee:	fa92 f2a2 	rbit	r2, r2
 8001df2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001df6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x410>
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f000 be2e 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	21f8      	movs	r1, #248	; 0xf8
 8001e42:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e4a:	fa91 f1a1 	rbit	r1, r1
 8001e4e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e52:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e56:	fab1 f181 	clz	r1, r1
 8001e5a:	b2c9      	uxtb	r1, r1
 8001e5c:	408b      	lsls	r3, r1
 8001e5e:	4969      	ldr	r1, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e64:	e0fd      	b.n	8002062 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8088 	beq.w	8001f88 <HAL_RCC_OscConfig+0x56c>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8be 	bl	8001024 <HAL_GetTick>
 8001ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eae:	f7ff f8b9 	bl	8001024 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d902      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f000 bde2 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ed6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4d8>
 8001eee:	4b45      	ldr	r3, [pc, #276]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e013      	b.n	8001f1c <HAL_RCC_OscConfig+0x500>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f18:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f26:	fa92 f2a2 	rbit	r2, r2
 8001f2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0220 	orr.w	r2, r2, #32
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0af      	beq.n	8001eae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	21f8      	movs	r1, #248	; 0xf8
 8001f64:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f6c:	fa91 f1a1 	rbit	r1, r1
 8001f70:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f74:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f78:	fab1 f181 	clz	r1, r1
 8001f7c:	b2c9      	uxtb	r1, r1
 8001f7e:	408b      	lsls	r3, r1
 8001f80:	4920      	ldr	r1, [pc, #128]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
 8001f86:	e06c      	b.n	8002062 <HAL_RCC_OscConfig+0x646>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f836 	bl	8001024 <HAL_GetTick>
 8001fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f831 	bl	8001024 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d902      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	f000 bd5a 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <HAL_RCC_OscConfig+0x5ec>
 8001ffe:	4b01      	ldr	r3, [pc, #4]	; (8002004 <HAL_RCC_OscConfig+0x5e8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e015      	b.n	8002030 <HAL_RCC_OscConfig+0x614>
 8002004:	40021000 	.word	0x40021000
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002020:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800202c:	4bc8      	ldr	r3, [pc, #800]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	2202      	movs	r2, #2
 8002032:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002036:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800203a:	fa92 f2a2 	rbit	r2, r2
 800203e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002042:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f002 021f 	and.w	r2, r2, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ad      	bne.n	8001fbe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8110 	beq.w	8002298 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d079      	beq.n	800217c <HAL_RCC_OscConfig+0x760>
 8002088:	2301      	movs	r3, #1
 800208a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800209a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4bab      	ldr	r3, [pc, #684]	; (8002354 <HAL_RCC_OscConfig+0x938>)
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	461a      	mov	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ffb7 	bl	8001024 <HAL_GetTick>
 80020b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7fe ffb2 	bl	8001024 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d902      	bls.n	80020d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f000 bcdb 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020ec:	2202      	movs	r2, #2
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002110:	2202      	movs	r2, #2
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800212a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 800212e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002138:	2102      	movs	r1, #2
 800213a:	6019      	str	r1, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f1a3 	rbit	r1, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002152:	6019      	str	r1, [r3, #0]
  return result;
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0a0      	beq.n	80020bc <HAL_RCC_OscConfig+0x6a0>
 800217a:	e08d      	b.n	8002298 <HAL_RCC_OscConfig+0x87c>
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800219e:	601a      	str	r2, [r3, #0]
  return result;
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x938>)
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe ff31 	bl	8001024 <HAL_GetTick>
 80021c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c8:	f7fe ff2c 	bl	8001024 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d902      	bls.n	80021de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	f000 bc55 	b.w	8002a88 <HAL_RCC_OscConfig+0x106c>
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800222e:	2202      	movs	r2, #2
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fa93 f2a3 	rbit	r2, r3
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002248:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 800224c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002252:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002256:	2102      	movs	r1, #2
 8002258:	6019      	str	r1, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f1a3 	rbit	r1, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002270:	6019      	str	r1, [r3, #0]
  return result;
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d197      	bne.n	80021c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 81a1 	beq.w	80025f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d116      	bne.n	80022ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ca:	61d3      	str	r3, [r2, #28]
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_RCC_OscConfig+0x93c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11a      	bne.n	8002330 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x93c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_RCC_OscConfig+0x93c>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7fe fe8d 	bl	8001024 <HAL_GetTick>
 800230a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	e009      	b.n	8002324 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7fe fe88 	bl	8001024 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e3b1      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_RCC_OscConfig+0x93c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ef      	beq.n	8002310 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10d      	bne.n	800235c <HAL_RCC_OscConfig+0x940>
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a02      	ldr	r2, [pc, #8]	; (8002350 <HAL_RCC_OscConfig+0x934>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e03c      	b.n	80023c8 <HAL_RCC_OscConfig+0x9ac>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	10908120 	.word	0x10908120
 8002358:	40007000 	.word	0x40007000
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x96a>
 800236c:	4bc1      	ldr	r3, [pc, #772]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4ac0      	ldr	r2, [pc, #768]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4bbe      	ldr	r3, [pc, #760]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4abd      	ldr	r2, [pc, #756]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	e020      	b.n	80023c8 <HAL_RCC_OscConfig+0x9ac>
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x994>
 8002396:	4bb7      	ldr	r3, [pc, #732]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4ab6      	ldr	r2, [pc, #728]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4bb4      	ldr	r3, [pc, #720]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4ab3      	ldr	r2, [pc, #716]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0x9ac>
 80023b0:	4bb0      	ldr	r3, [pc, #704]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4aaf      	ldr	r2, [pc, #700]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6213      	str	r3, [r2, #32]
 80023bc:	4bad      	ldr	r3, [pc, #692]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4aac      	ldr	r2, [pc, #688]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8081 	beq.w	80024dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe fe23 	bl	8001024 <HAL_GetTick>
 80023de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe fe1e 	bl	8001024 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e345      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002442:	601a      	str	r2, [r3, #0]
  return result;
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800244c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d102      	bne.n	8002468 <HAL_RCC_OscConfig+0xa4c>
 8002462:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0xa74>
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	4b79      	ldr	r3, [pc, #484]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002494:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002498:	2102      	movs	r1, #2
 800249a:	6011      	str	r1, [r2, #0]
 800249c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	fa92 f1a2 	rbit	r1, r2
 80024aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024b2:	6011      	str	r1, [r2, #0]
  return result;
 80024b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d084      	beq.n	80023e4 <HAL_RCC_OscConfig+0x9c8>
 80024da:	e07f      	b.n	80025dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fda2 	bl	8001024 <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fd9d 	bl	8001024 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e2c4      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800252a:	2202      	movs	r2, #2
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002544:	601a      	str	r2, [r3, #0]
  return result;
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800254e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0xb4e>
 8002564:	4b43      	ldr	r3, [pc, #268]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	e013      	b.n	8002592 <HAL_RCC_OscConfig+0xb76>
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002572:	2202      	movs	r2, #2
 8002574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fa93 f2a3 	rbit	r2, r3
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002596:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800259a:	2102      	movs	r1, #2
 800259c:	6011      	str	r1, [r2, #0]
 800259e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fa92 f1a2 	rbit	r1, r2
 80025ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025b4:	6011      	str	r1, [r2, #0]
  return result;
 80025b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ba:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d184      	bne.n	80024e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8242 	beq.w	8002a86 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <HAL_RCC_OscConfig+0xc58>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	f000 8213 	beq.w	8002a36 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b02      	cmp	r3, #2
 800261e:	f040 8162 	bne.w	80028e6 <HAL_RCC_OscConfig+0xeca>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800262a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800262e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002646:	601a      	str	r2, [r3, #0]
  return result;
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002650:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fcdc 	bl	8001024 <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e00c      	b.n	800268c <HAL_RCC_OscConfig+0xc70>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fcd4 	bl	8001024 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1fd      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026b0:	601a      	str	r2, [r3, #0]
  return result;
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d102      	bne.n	80026d6 <HAL_RCC_OscConfig+0xcba>
 80026d0:	4bb0      	ldr	r3, [pc, #704]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e027      	b.n	8002726 <HAL_RCC_OscConfig+0xd0a>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b9c      	ldr	r3, [pc, #624]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800272e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002732:	6011      	str	r1, [r2, #0]
 8002734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002738:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	fa92 f1a2 	rbit	r1, r2
 8002742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002746:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800274a:	6011      	str	r1, [r2, #0]
  return result;
 800274c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002750:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d182      	bne.n	8002678 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	430b      	orrs	r3, r1
 8002794:	497f      	ldr	r1, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027be:	601a      	str	r2, [r3, #0]
  return result;
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	461a      	mov	r2, r3
 80027dc:	2301      	movs	r3, #1
 80027de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc20 	bl	8001024 <HAL_GetTick>
 80027e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	e009      	b.n	80027fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fc1b 	bl	8001024 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e144      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002822:	601a      	str	r2, [r3, #0]
  return result;
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800282c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d102      	bne.n	8002848 <HAL_RCC_OscConfig+0xe2c>
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e027      	b.n	8002898 <HAL_RCC_OscConfig+0xe7c>
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028a4:	6011      	str	r1, [r2, #0]
 80028a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028aa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	fa92 f1a2 	rbit	r1, r2
 80028b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028bc:	6011      	str	r1, [r2, #0]
  return result;
 80028be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fab2 f282 	clz	r2, r2
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f042 0220 	orr.w	r2, r2, #32
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f002 021f 	and.w	r2, r2, #31
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d082      	beq.n	80027ea <HAL_RCC_OscConfig+0xdce>
 80028e4:	e0cf      	b.n	8002a86 <HAL_RCC_OscConfig+0x106a>
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800290a:	601a      	str	r2, [r3, #0]
  return result;
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002914:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002920:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	461a      	mov	r2, r3
 8002928:	2300      	movs	r3, #0
 800292a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fb7a 	bl	8001024 <HAL_GetTick>
 8002930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	e009      	b.n	800294a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fb75 	bl	8001024 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e09e      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800296e:	601a      	str	r2, [r3, #0]
  return result;
 8002970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002974:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002978:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d104      	bne.n	8002998 <HAL_RCC_OscConfig+0xf7c>
 800298e:	4b01      	ldr	r3, [pc, #4]	; (8002994 <HAL_RCC_OscConfig+0xf78>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e029      	b.n	80029e8 <HAL_RCC_OscConfig+0xfcc>
 8002994:	40021000 	.word	0x40021000
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fa93 f2a3 	rbit	r2, r3
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	fa93 f2a3 	rbit	r2, r3
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x1078>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ec:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029f4:	6011      	str	r1, [r2, #0]
 80029f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029fa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	fa92 f1a2 	rbit	r1, r2
 8002a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a08:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a0c:	6011      	str	r1, [r2, #0]
  return result;
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d180      	bne.n	8002936 <HAL_RCC_OscConfig+0xf1a>
 8002a34:	e027      	b.n	8002a86 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01e      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_OscConfig+0x1078>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b09e      	sub	sp, #120	; 0x78
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e162      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b90      	ldr	r3, [pc, #576]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d910      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b8d      	ldr	r3, [pc, #564]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	498b      	ldr	r1, [pc, #556]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b89      	ldr	r3, [pc, #548]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e14a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	497f      	ldr	r1, [pc, #508]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80dc 	beq.w	8002cc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d13c      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xf6>
 8002b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xa6>
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	e00f      	b.n	8002b5e <HAL_RCC_ClockConfig+0xc6>
 8002b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b50:	663b      	str	r3, [r7, #96]	; 0x60
 8002b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b62:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d17b      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0f3      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d13c      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x178>
 8002b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x128>
 8002bba:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e00f      	b.n	8002be0 <HAL_RCC_ClockConfig+0x148>
 8002bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002be8:	fa92 f2a2 	rbit	r2, r2
 8002bec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f002 021f 	and.w	r2, r2, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d13a      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b2      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
 8002c10:	2302      	movs	r3, #2
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
 8002c32:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	e00d      	b.n	8002c54 <HAL_RCC_ClockConfig+0x1bc>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	2302      	movs	r3, #2
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2202      	movs	r2, #2
 8002c56:	61ba      	str	r2, [r7, #24]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	617a      	str	r2, [r7, #20]
  return result;
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e079      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	491a      	ldr	r1, [pc, #104]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe f9c6 	bl	8001024 <HAL_GetTick>
 8002c98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7fe f9c2 	bl	8001024 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e061      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_ClockConfig+0x260>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d214      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e040      	b.n	8002d76 <HAL_RCC_ClockConfig+0x2de>
 8002cf4:	40022000 	.word	0x40022000
 8002cf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_ClockConfig+0x2e8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	491a      	ldr	r1, [pc, #104]	; (8002d80 <HAL_RCC_ClockConfig+0x2e8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x2e8>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4912      	ldr	r1, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x2e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d3a:	f000 f829 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4601      	mov	r1, r0
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCC_ClockConfig+0x2e8>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	22f0      	movs	r2, #240	; 0xf0
 8002d4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	fa92 f2a2 	rbit	r2, r2
 8002d52:	60fa      	str	r2, [r7, #12]
  return result;
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	40d3      	lsrs	r3, r2
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x2ec>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	fa21 f303 	lsr.w	r3, r1, r3
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_RCC_ClockConfig+0x2f0>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_RCC_ClockConfig+0x2f4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f914 	bl	8000f9c <HAL_InitTick>
  
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3778      	adds	r7, #120	; 0x78
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004774 	.word	0x08004774
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dbe:	e03c      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dc2:	623b      	str	r3, [r7, #32]
      break;
 8002dc4:	e03c      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dcc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002dd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	fa92 f2a2 	rbit	r2, r2
 8002dd8:	607a      	str	r2, [r7, #4]
  return result;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	40d3      	lsrs	r3, r2
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dea:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	220f      	movs	r2, #15
 8002df4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	fa92 f2a2 	rbit	r2, r2
 8002dfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	40d3      	lsrs	r3, r2
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
 8002e28:	e004      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	623b      	str	r3, [r7, #32]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e3c:	623b      	str	r3, [r7, #32]
      break;
 8002e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	372c      	adds	r7, #44	; 0x2c
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	007a1200 	.word	0x007a1200
 8002e58:	0800478c 	.word	0x0800478c
 8002e5c:	0800479c 	.word	0x0800479c
 8002e60:	003d0900 	.word	0x003d0900

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e82:	f7ff ffef 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e86:	4601      	mov	r1, r0
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	fa92 f2a2 	rbit	r2, r2
 8002e9c:	603a      	str	r2, [r7, #0]
  return result;
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	40d3      	lsrs	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08004784 	.word	0x08004784

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ec6:	f7ff ffcd 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ed4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ed8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	fa92 f2a2 	rbit	r2, r2
 8002ee0:	603a      	str	r2, [r7, #0]
  return result;
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	40d3      	lsrs	r3, r2
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004784 	.word	0x08004784

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b092      	sub	sp, #72	; 0x48
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80d4 	beq.w	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f28:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10e      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	61d3      	str	r3, [r2, #28]
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b45      	ldr	r3, [pc, #276]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b42      	ldr	r3, [pc, #264]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a41      	ldr	r2, [pc, #260]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f85b 	bl	8001024 <HAL_GetTick>
 8002f6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe f857 	bl	8001024 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e169      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8084 	beq.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d07c      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2300      	movs	r3, #0
 8003000:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003006:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d04b      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe f807 	bl	8001024 <HAL_GetTick>
 8003016:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe f803 	bl	8001024 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e113      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003030:	2302      	movs	r3, #2
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	2302      	movs	r3, #2
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	61fb      	str	r3, [r7, #28]
  return result;
 8003048:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d108      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800305e:	4b01      	ldr	r3, [pc, #4]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	e00d      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
 800306c:	10908100 	.word	0x10908100
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2202      	movs	r2, #2
 8003082:	613a      	str	r2, [r7, #16]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	60fa      	str	r2, [r7, #12]
  return result;
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0b7      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	496a      	ldr	r1, [pc, #424]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c4:	4b66      	ldr	r3, [pc, #408]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4a65      	ldr	r2, [pc, #404]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030dc:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f023 0203 	bic.w	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	495d      	ldr	r1, [pc, #372]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4956      	ldr	r1, [pc, #344]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	494e      	ldr	r1, [pc, #312]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f023 0210 	bic.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4947      	ldr	r1, [pc, #284]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003154:	4b42      	ldr	r3, [pc, #264]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	493f      	ldr	r1, [pc, #252]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f023 0220 	bic.w	r2, r3, #32
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4938      	ldr	r1, [pc, #224]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4930      	ldr	r1, [pc, #192]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4921      	ldr	r1, [pc, #132]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	491a      	ldr	r1, [pc, #104]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	4912      	ldr	r1, [pc, #72]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	490b      	ldr	r1, [pc, #44]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3748      	adds	r7, #72	; 0x48
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e09d      	b.n	80033b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003286:	d009      	beq.n	800329c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
 800328e:	e005      	b.n	800329c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fac8 	bl	800084c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032dc:	d902      	bls.n	80032e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e002      	b.n	80032ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032f2:	d007      	beq.n	8003304 <HAL_SPI_Init+0xa0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	f003 0204 	and.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003380:	ea42 0103 	orr.w	r1, r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e049      	b.n	8003460 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd fa75 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f000 fab9 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04a      	b.n	8003516 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a21      	ldr	r2, [pc, #132]	; (8003524 <HAL_TIM_Base_Start_IT+0xbc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x6c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d013      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x6c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_TIM_Base_Start_IT+0xc0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x6c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_TIM_Base_Start_IT+0xc4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x6c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_TIM_Base_Start_IT+0xc8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x6c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_TIM_Base_Start_IT+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d115      	bne.n	8003500 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_TIM_Base_Start_IT+0xd0>)
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d015      	beq.n	8003512 <HAL_TIM_Base_Start_IT+0xaa>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d011      	beq.n	8003512 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	e008      	b.n	8003512 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e000      	b.n	8003514 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40013400 	.word	0x40013400
 8003534:	40014000 	.word	0x40014000
 8003538:	00010007 	.word	0x00010007

0800353c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0202 	mvn.w	r2, #2
 8003568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f9d8 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9ca 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9db 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0204 	mvn.w	r2, #4
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9ae 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9a0 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f9b1 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b08      	cmp	r3, #8
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0208 	mvn.w	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f984 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f976 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f987 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b10      	cmp	r3, #16
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f95a 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f94c 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f95d 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0201 	mvn.w	r2, #1
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f926 	bl	800390c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 faf6 	bl	8003cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fa:	d10e      	bne.n	800371a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d107      	bne.n	800371a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fae9 	bl	8003cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f90b 	bl	800395c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b20      	cmp	r3, #32
 8003752:	d10e      	bne.n	8003772 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d107      	bne.n	8003772 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0220 	mvn.w	r2, #32
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faa9 	bl	8003cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_ConfigClockSource+0x1c>
 8003792:	2302      	movs	r3, #2
 8003794:	e0b6      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x18a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d2:	d03e      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xd8>
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	f200 8087 	bhi.w	80038ea <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e0:	f000 8086 	beq.w	80038f0 <HAL_TIM_ConfigClockSource+0x176>
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d87f      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 80037ea:	2b70      	cmp	r3, #112	; 0x70
 80037ec:	d01a      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xaa>
 80037ee:	2b70      	cmp	r3, #112	; 0x70
 80037f0:	d87b      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 80037f2:	2b60      	cmp	r3, #96	; 0x60
 80037f4:	d050      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0x11e>
 80037f6:	2b60      	cmp	r3, #96	; 0x60
 80037f8:	d877      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 80037fa:	2b50      	cmp	r3, #80	; 0x50
 80037fc:	d03c      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xfe>
 80037fe:	2b50      	cmp	r3, #80	; 0x50
 8003800:	d873      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d058      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x13e>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d86f      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 800380a:	2b30      	cmp	r3, #48	; 0x30
 800380c:	d064      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x15e>
 800380e:	2b30      	cmp	r3, #48	; 0x30
 8003810:	d86b      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 8003812:	2b20      	cmp	r3, #32
 8003814:	d060      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x15e>
 8003816:	2b20      	cmp	r3, #32
 8003818:	d867      	bhi.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d05c      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x15e>
 800381e:	2b10      	cmp	r3, #16
 8003820:	d05a      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x15e>
 8003822:	e062      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 f9a6 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003846:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e04f      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f000 f98f 	bl	8003b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e03c      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	461a      	mov	r2, r3
 8003886:	f000 f903 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2150      	movs	r1, #80	; 0x50
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f95c 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003896:	e02c      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 f922 	bl	8003aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2160      	movs	r1, #96	; 0x60
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f94c 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038b6:	e01c      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f000 f8e3 	bl	8003a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f93c 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038d6:	e00c      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 f933 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      break;
 80038ee:	e000      	b.n	80038f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a39      	ldr	r2, [pc, #228]	; (8003a78 <TIM_Base_SetConfig+0x108>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <TIM_Base_SetConfig+0x10c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a37      	ldr	r2, [pc, #220]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01b      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d017      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <TIM_Base_SetConfig+0x108>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <TIM_Base_SetConfig+0x10c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <TIM_Base_SetConfig+0x104>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <TIM_Base_SetConfig+0x110>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xe8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40013400 	.word	0x40013400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40014800 	.word	0x40014800

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e063      	b.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4e:	d013      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10c      	bne.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40013400 	.word	0x40013400
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40014000 	.word	0x40014000

08003cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e040      	b.n	8003d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fc fe14 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8c0 	bl	8003ec4 <UART_SetConfig>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e022      	b.n	8003d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa8a 	bl	8004270 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb11 	bl	80043b4 <UART_CheckIdleState>
 8003d92:	4603      	mov	r3, r0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	f040 8082 	bne.w	8003eba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_UART_Transmit+0x26>
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07a      	b.n	8003ebc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_UART_Transmit+0x38>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e073      	b.n	8003ebc <HAL_UART_Transmit+0x120>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2221      	movs	r2, #33	; 0x21
 8003de8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dea:	f7fd f91b 	bl	8001024 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d108      	bne.n	8003e1c <HAL_UART_Transmit+0x80>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	e003      	b.n	8003e24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e2c:	e02d      	b.n	8003e8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	; 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fb04 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e039      	b.n	8003ebc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e5a:	b292      	uxth	r2, r2
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	3302      	adds	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e008      	b.n	8003e78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3301      	adds	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cb      	bne.n	8003e2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fad0 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e005      	b.n	8003ebc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ef2:	f023 030c 	bic.w	r3, r3, #12
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4aa8      	ldr	r2, [pc, #672]	; (80041e0 <UART_SetConfig+0x31c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d120      	bne.n	8003f86 <UART_SetConfig+0xc2>
 8003f44:	4ba7      	ldr	r3, [pc, #668]	; (80041e4 <UART_SetConfig+0x320>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d817      	bhi.n	8003f80 <UART_SetConfig+0xbc>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x94>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f7b 	.word	0x08003f7b
 8003f64:	08003f6f 	.word	0x08003f6f
 8003f68:	2301      	movs	r3, #1
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0b5      	b.n	80040da <UART_SetConfig+0x216>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e0b2      	b.n	80040da <UART_SetConfig+0x216>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0af      	b.n	80040da <UART_SetConfig+0x216>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e0ac      	b.n	80040da <UART_SetConfig+0x216>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e0a9      	b.n	80040da <UART_SetConfig+0x216>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a97      	ldr	r2, [pc, #604]	; (80041e8 <UART_SetConfig+0x324>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d124      	bne.n	8003fda <UART_SetConfig+0x116>
 8003f90:	4b94      	ldr	r3, [pc, #592]	; (80041e4 <UART_SetConfig+0x320>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f9c:	d011      	beq.n	8003fc2 <UART_SetConfig+0xfe>
 8003f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fa2:	d817      	bhi.n	8003fd4 <UART_SetConfig+0x110>
 8003fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa8:	d011      	beq.n	8003fce <UART_SetConfig+0x10a>
 8003faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fae:	d811      	bhi.n	8003fd4 <UART_SetConfig+0x110>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0xf8>
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d006      	beq.n	8003fc8 <UART_SetConfig+0x104>
 8003fba:	e00b      	b.n	8003fd4 <UART_SetConfig+0x110>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e08b      	b.n	80040da <UART_SetConfig+0x216>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e088      	b.n	80040da <UART_SetConfig+0x216>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e085      	b.n	80040da <UART_SetConfig+0x216>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e082      	b.n	80040da <UART_SetConfig+0x216>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e07f      	b.n	80040da <UART_SetConfig+0x216>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a83      	ldr	r2, [pc, #524]	; (80041ec <UART_SetConfig+0x328>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d124      	bne.n	800402e <UART_SetConfig+0x16a>
 8003fe4:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <UART_SetConfig+0x320>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ff0:	d011      	beq.n	8004016 <UART_SetConfig+0x152>
 8003ff2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ff6:	d817      	bhi.n	8004028 <UART_SetConfig+0x164>
 8003ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ffc:	d011      	beq.n	8004022 <UART_SetConfig+0x15e>
 8003ffe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004002:	d811      	bhi.n	8004028 <UART_SetConfig+0x164>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <UART_SetConfig+0x14c>
 8004008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800400c:	d006      	beq.n	800401c <UART_SetConfig+0x158>
 800400e:	e00b      	b.n	8004028 <UART_SetConfig+0x164>
 8004010:	2300      	movs	r3, #0
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e061      	b.n	80040da <UART_SetConfig+0x216>
 8004016:	2302      	movs	r3, #2
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e05e      	b.n	80040da <UART_SetConfig+0x216>
 800401c:	2304      	movs	r3, #4
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e05b      	b.n	80040da <UART_SetConfig+0x216>
 8004022:	2308      	movs	r3, #8
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e058      	b.n	80040da <UART_SetConfig+0x216>
 8004028:	2310      	movs	r3, #16
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e055      	b.n	80040da <UART_SetConfig+0x216>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6f      	ldr	r2, [pc, #444]	; (80041f0 <UART_SetConfig+0x32c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d124      	bne.n	8004082 <UART_SetConfig+0x1be>
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <UART_SetConfig+0x320>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004044:	d011      	beq.n	800406a <UART_SetConfig+0x1a6>
 8004046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800404a:	d817      	bhi.n	800407c <UART_SetConfig+0x1b8>
 800404c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004050:	d011      	beq.n	8004076 <UART_SetConfig+0x1b2>
 8004052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004056:	d811      	bhi.n	800407c <UART_SetConfig+0x1b8>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x1a0>
 800405c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x1ac>
 8004062:	e00b      	b.n	800407c <UART_SetConfig+0x1b8>
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e037      	b.n	80040da <UART_SetConfig+0x216>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e034      	b.n	80040da <UART_SetConfig+0x216>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e031      	b.n	80040da <UART_SetConfig+0x216>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e02e      	b.n	80040da <UART_SetConfig+0x216>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e02b      	b.n	80040da <UART_SetConfig+0x216>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a5b      	ldr	r2, [pc, #364]	; (80041f4 <UART_SetConfig+0x330>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d124      	bne.n	80040d6 <UART_SetConfig+0x212>
 800408c:	4b55      	ldr	r3, [pc, #340]	; (80041e4 <UART_SetConfig+0x320>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004098:	d011      	beq.n	80040be <UART_SetConfig+0x1fa>
 800409a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800409e:	d817      	bhi.n	80040d0 <UART_SetConfig+0x20c>
 80040a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a4:	d011      	beq.n	80040ca <UART_SetConfig+0x206>
 80040a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040aa:	d811      	bhi.n	80040d0 <UART_SetConfig+0x20c>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <UART_SetConfig+0x1f4>
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d006      	beq.n	80040c4 <UART_SetConfig+0x200>
 80040b6:	e00b      	b.n	80040d0 <UART_SetConfig+0x20c>
 80040b8:	2300      	movs	r3, #0
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e00d      	b.n	80040da <UART_SetConfig+0x216>
 80040be:	2302      	movs	r3, #2
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e00a      	b.n	80040da <UART_SetConfig+0x216>
 80040c4:	2304      	movs	r3, #4
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e007      	b.n	80040da <UART_SetConfig+0x216>
 80040ca:	2308      	movs	r3, #8
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e004      	b.n	80040da <UART_SetConfig+0x216>
 80040d0:	2310      	movs	r3, #16
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e001      	b.n	80040da <UART_SetConfig+0x216>
 80040d6:	2310      	movs	r3, #16
 80040d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e2:	d15c      	bne.n	800419e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d827      	bhi.n	800413a <UART_SetConfig+0x276>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0x22c>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004115 	.word	0x08004115
 80040f4:	0800411d 	.word	0x0800411d
 80040f8:	08004125 	.word	0x08004125
 80040fc:	0800413b 	.word	0x0800413b
 8004100:	0800412b 	.word	0x0800412b
 8004104:	0800413b 	.word	0x0800413b
 8004108:	0800413b 	.word	0x0800413b
 800410c:	0800413b 	.word	0x0800413b
 8004110:	08004133 	.word	0x08004133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004114:	f7fe feb2 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004118:	61b8      	str	r0, [r7, #24]
        break;
 800411a:	e013      	b.n	8004144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800411c:	f7fe fed0 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8004120:	61b8      	str	r0, [r7, #24]
        break;
 8004122:	e00f      	b.n	8004144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004124:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <UART_SetConfig+0x334>)
 8004126:	61bb      	str	r3, [r7, #24]
        break;
 8004128:	e00c      	b.n	8004144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412a:	f7fe fe31 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 800412e:	61b8      	str	r0, [r7, #24]
        break;
 8004130:	e008      	b.n	8004144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004136:	61bb      	str	r3, [r7, #24]
        break;
 8004138:	e004      	b.n	8004144 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	77bb      	strb	r3, [r7, #30]
        break;
 8004142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8084 	beq.w	8004254 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	005a      	lsls	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	d916      	bls.n	8004198 <UART_SetConfig+0x2d4>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d212      	bcs.n	8004198 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f023 030f 	bic.w	r3, r3, #15
 800417a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	b29a      	uxth	r2, r3
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	4313      	orrs	r3, r2
 800418c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	89fa      	ldrh	r2, [r7, #14]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	e05d      	b.n	8004254 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	77bb      	strb	r3, [r7, #30]
 800419c:	e05a      	b.n	8004254 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d836      	bhi.n	8004212 <UART_SetConfig+0x34e>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x2e8>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041fd 	.word	0x080041fd
 80041b8:	08004213 	.word	0x08004213
 80041bc:	08004203 	.word	0x08004203
 80041c0:	08004213 	.word	0x08004213
 80041c4:	08004213 	.word	0x08004213
 80041c8:	08004213 	.word	0x08004213
 80041cc:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7fe fe54 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80041d4:	61b8      	str	r0, [r7, #24]
        break;
 80041d6:	e021      	b.n	800421c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fe72 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80041dc:	61b8      	str	r0, [r7, #24]
        break;
 80041de:	e01d      	b.n	800421c <UART_SetConfig+0x358>
 80041e0:	40013800 	.word	0x40013800
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40004400 	.word	0x40004400
 80041ec:	40004800 	.word	0x40004800
 80041f0:	40004c00 	.word	0x40004c00
 80041f4:	40005000 	.word	0x40005000
 80041f8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <UART_SetConfig+0x3a8>)
 80041fe:	61bb      	str	r3, [r7, #24]
        break;
 8004200:	e00c      	b.n	800421c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe fdc5 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8004206:	61b8      	str	r0, [r7, #24]
        break;
 8004208:	e008      	b.n	800421c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	61bb      	str	r3, [r7, #24]
        break;
 8004210:	e004      	b.n	800421c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	77bb      	strb	r3, [r7, #30]
        break;
 800421a:	bf00      	nop
    }

    if (pclk != 0U)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d018      	beq.n	8004254 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	085a      	lsrs	r2, r3, #1
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d908      	bls.n	8004250 <UART_SetConfig+0x38c>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d204      	bcs.n	8004250 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	e001      	b.n	8004254 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004260:	7fbb      	ldrb	r3, [r7, #30]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	007a1200 	.word	0x007a1200

08004270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436e:	d10a      	bne.n	8004386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c4:	f7fc fe2e 	bl	8001024 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10e      	bne.n	80043f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f82d 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e023      	b.n	800443e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d10e      	bne.n	8004422 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f817 	bl	8004446 <UART_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00d      	b.n	800443e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b09c      	sub	sp, #112	; 0x70
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	e0a5      	b.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	f000 80a1 	beq.w	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fc fddf 	bl	8001024 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <UART_WaitOnFlagUntilTimeout+0x32>
 8004472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004474:	2b00      	cmp	r3, #0
 8004476:	d13e      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800448c:	667b      	str	r3, [r7, #100]	; 0x64
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004498:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800449c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3308      	adds	r3, #8
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	663b      	str	r3, [r7, #96]	; 0x60
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e067      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d04f      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004512:	d147      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800451c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
 800453e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	613b      	str	r3, [r7, #16]
   return(result);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004570:	623a      	str	r2, [r7, #32]
 8004572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	69f9      	ldr	r1, [r7, #28]
 8004576:	6a3a      	ldr	r2, [r7, #32]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	61bb      	str	r3, [r7, #24]
   return(result);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e010      	b.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	f43f af4a 	beq.w	8004458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3770      	adds	r7, #112	; 0x70
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045d6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4013      	ands	r3, r2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004604:	b084      	sub	sp, #16
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	f107 0014 	add.w	r0, r7, #20
 8004612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	b004      	add	sp, #16
 8004644:	4770      	bx	lr
	...

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4d0d      	ldr	r5, [pc, #52]	; (8004680 <__libc_init_array+0x38>)
 800464c:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 800464e:	1b64      	subs	r4, r4, r5
 8004650:	10a4      	asrs	r4, r4, #2
 8004652:	2600      	movs	r6, #0
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	4d0b      	ldr	r5, [pc, #44]	; (8004688 <__libc_init_array+0x40>)
 800465a:	4c0c      	ldr	r4, [pc, #48]	; (800468c <__libc_init_array+0x44>)
 800465c:	f000 f87c 	bl	8004758 <_init>
 8004660:	1b64      	subs	r4, r4, r5
 8004662:	10a4      	asrs	r4, r4, #2
 8004664:	2600      	movs	r6, #0
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	080047d4 	.word	0x080047d4
 8004684:	080047d4 	.word	0x080047d4
 8004688:	080047d4 	.word	0x080047d4
 800468c:	080047d8 	.word	0x080047d8

08004690 <__itoa>:
 8004690:	1e93      	subs	r3, r2, #2
 8004692:	2b22      	cmp	r3, #34	; 0x22
 8004694:	b510      	push	{r4, lr}
 8004696:	460c      	mov	r4, r1
 8004698:	d904      	bls.n	80046a4 <__itoa+0x14>
 800469a:	2300      	movs	r3, #0
 800469c:	700b      	strb	r3, [r1, #0]
 800469e:	461c      	mov	r4, r3
 80046a0:	4620      	mov	r0, r4
 80046a2:	bd10      	pop	{r4, pc}
 80046a4:	2a0a      	cmp	r2, #10
 80046a6:	d109      	bne.n	80046bc <__itoa+0x2c>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	da07      	bge.n	80046bc <__itoa+0x2c>
 80046ac:	232d      	movs	r3, #45	; 0x2d
 80046ae:	700b      	strb	r3, [r1, #0]
 80046b0:	4240      	negs	r0, r0
 80046b2:	2101      	movs	r1, #1
 80046b4:	4421      	add	r1, r4
 80046b6:	f000 f80d 	bl	80046d4 <__utoa>
 80046ba:	e7f1      	b.n	80046a0 <__itoa+0x10>
 80046bc:	2100      	movs	r1, #0
 80046be:	e7f9      	b.n	80046b4 <__itoa+0x24>

080046c0 <itoa>:
 80046c0:	f7ff bfe6 	b.w	8004690 <__itoa>

080046c4 <memset>:
 80046c4:	4402      	add	r2, r0
 80046c6:	4603      	mov	r3, r0
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d100      	bne.n	80046ce <memset+0xa>
 80046cc:	4770      	bx	lr
 80046ce:	f803 1b01 	strb.w	r1, [r3], #1
 80046d2:	e7f9      	b.n	80046c8 <memset+0x4>

080046d4 <__utoa>:
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d6:	4c1f      	ldr	r4, [pc, #124]	; (8004754 <__utoa+0x80>)
 80046d8:	b08b      	sub	sp, #44	; 0x2c
 80046da:	4605      	mov	r5, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	466e      	mov	r6, sp
 80046e0:	f104 0c20 	add.w	ip, r4, #32
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	6861      	ldr	r1, [r4, #4]
 80046e8:	4637      	mov	r7, r6
 80046ea:	c703      	stmia	r7!, {r0, r1}
 80046ec:	3408      	adds	r4, #8
 80046ee:	4564      	cmp	r4, ip
 80046f0:	463e      	mov	r6, r7
 80046f2:	d1f7      	bne.n	80046e4 <__utoa+0x10>
 80046f4:	7921      	ldrb	r1, [r4, #4]
 80046f6:	7139      	strb	r1, [r7, #4]
 80046f8:	1e91      	subs	r1, r2, #2
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	6038      	str	r0, [r7, #0]
 80046fe:	2922      	cmp	r1, #34	; 0x22
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	d904      	bls.n	8004710 <__utoa+0x3c>
 8004706:	7019      	strb	r1, [r3, #0]
 8004708:	460b      	mov	r3, r1
 800470a:	4618      	mov	r0, r3
 800470c:	b00b      	add	sp, #44	; 0x2c
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	1e58      	subs	r0, r3, #1
 8004712:	4684      	mov	ip, r0
 8004714:	fbb5 f7f2 	udiv	r7, r5, r2
 8004718:	fb02 5617 	mls	r6, r2, r7, r5
 800471c:	3628      	adds	r6, #40	; 0x28
 800471e:	446e      	add	r6, sp
 8004720:	460c      	mov	r4, r1
 8004722:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004726:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800472a:	462e      	mov	r6, r5
 800472c:	42b2      	cmp	r2, r6
 800472e:	f101 0101 	add.w	r1, r1, #1
 8004732:	463d      	mov	r5, r7
 8004734:	d9ee      	bls.n	8004714 <__utoa+0x40>
 8004736:	2200      	movs	r2, #0
 8004738:	545a      	strb	r2, [r3, r1]
 800473a:	1919      	adds	r1, r3, r4
 800473c:	1aa5      	subs	r5, r4, r2
 800473e:	42aa      	cmp	r2, r5
 8004740:	dae3      	bge.n	800470a <__utoa+0x36>
 8004742:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004746:	780e      	ldrb	r6, [r1, #0]
 8004748:	7006      	strb	r6, [r0, #0]
 800474a:	3201      	adds	r2, #1
 800474c:	f801 5901 	strb.w	r5, [r1], #-1
 8004750:	e7f4      	b.n	800473c <__utoa+0x68>
 8004752:	bf00      	nop
 8004754:	080047ac 	.word	0x080047ac

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
