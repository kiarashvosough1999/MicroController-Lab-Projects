
SelfCoded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080026f8  080026f8  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f8  080026f8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08002700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000020  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004801  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010ca  00000000  00000000  000248dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  000259a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a0  00000000  00000000  00025de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b739  00000000  00000000  00026180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ee3  00000000  00000000  000418b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a433b  00000000  00000000  0004779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ebad7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ee8  00000000  00000000  000ebb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026b0 	.word	0x080026b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	080026b0 	.word	0x080026b0

080001c8 <enable_blue_button>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */


static void enable_blue_button() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <enable_blue_button+0x50>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <enable_blue_button+0x50>)
 80001d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001d8:	6153      	str	r3, [r2, #20]
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <enable_blue_button+0x50>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	603b      	str	r3, [r7, #0]
 80001e4:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001f4:	2301      	movs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001fc:	2303      	movs	r3, #3
 80001fe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000200:	2302      	movs	r3, #2
 8000202:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	4619      	mov	r1, r3
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f000 fca6 	bl	8000b5c <HAL_GPIO_Init>
}
 8000210:	bf00      	nop
 8000212:	3718      	adds	r7, #24
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000

0800021c <enable_on_board_led>:


static void enable_on_board_led() {
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000222:	4b12      	ldr	r3, [pc, #72]	; (800026c <enable_on_board_led+0x50>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a11      	ldr	r2, [pc, #68]	; (800026c <enable_on_board_led+0x50>)
 8000228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800022c:	6153      	str	r3, [r2, #20]
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <enable_on_board_led+0x50>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000248:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800024c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000252:	2303      	movs	r3, #3
 8000254:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000256:	2302      	movs	r3, #2
 8000258:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	4804      	ldr	r0, [pc, #16]	; (8000270 <enable_on_board_led+0x54>)
 8000260:	f000 fc7c 	bl	8000b5c <HAL_GPIO_Init>
}
 8000264:	bf00      	nop
 8000266:	3718      	adds	r7, #24
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000
 8000270:	48001000 	.word	0x48001000

08000274 <enable_ou_led>:

static void enable_ou_led() {
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <enable_ou_led+0x50>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <enable_ou_led+0x50>)
 8000280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <enable_ou_led+0x50>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80002a0:	2303      	movs	r3, #3
 80002a2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a8:	2303      	movs	r3, #3
 80002aa:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <enable_ou_led+0x54>)
 80002b6:	f000 fc51 	bl	8000b5c <HAL_GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	48000800 	.word	0x48000800

080002cc <enable_seven_segment>:

static void enable_seven_segment() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <enable_seven_segment+0x50>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a11      	ldr	r2, [pc, #68]	; (800031c <enable_seven_segment+0x50>)
 80002d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <enable_seven_segment+0x50>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80002f8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80002fc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fe:	2301      	movs	r3, #1
 8000300:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000302:	2303      	movs	r3, #3
 8000304:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000306:	2302      	movs	r3, #2
 8000308:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <enable_seven_segment+0x54>)
 8000310:	f000 fc24 	bl	8000b5c <HAL_GPIO_Init>
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40021000 	.word	0x40021000
 8000320:	48000c00 	.word	0x48000c00

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032a:	f000 faa7 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032e:	f000 f9b3 	bl	8000698 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  enable_blue_button();
 8000332:	f7ff ff49 	bl	80001c8 <enable_blue_button>
  enable_on_board_led();
 8000336:	f7ff ff71 	bl	800021c <enable_on_board_led>
  enable_ou_led();
 800033a:	f7ff ff9b 	bl	8000274 <enable_ou_led>
  enable_seven_segment();
 800033e:	f7ff ffc5 	bl	80002cc <enable_seven_segment>
//  MX_I2C1_Init();
//  MX_SPI1_Init();
//  MX_USB_PCD_Init();
  /* USER CODE BEGIN 2 */

  int counter = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  int onBoardLEDNumber = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]

    /* USER CODE BEGIN 3 */



	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 800034a:	2101      	movs	r1, #1
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f000 fd7e 	bl	8000e50 <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	2b01      	cmp	r3, #1
 8000358:	d1f7      	bne.n	800034a <main+0x26>

		  counter++;
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	3301      	adds	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
		  if (counter == 10) {
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	2b0a      	cmp	r3, #10
 8000364:	d178      	bne.n	8000458 <main+0x134>
			  onBoardLEDNumber++;
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	3301      	adds	r3, #1
 800036a:	613b      	str	r3, [r7, #16]
			  counter = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

			  if (onBoardLEDNumber > 6) {
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	2b06      	cmp	r3, #6
 8000374:	dd01      	ble.n	800037a <main+0x56>
				  onBoardLEDNumber = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
			  }

			  if (onBoardLEDNumber == 0) {
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10c      	bne.n	800039a <main+0x76>
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000386:	4892      	ldr	r0, [pc, #584]	; (80005d0 <main+0x2ac>)
 8000388:	f000 fd7a 	bl	8000e80 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000392:	488f      	ldr	r0, [pc, #572]	; (80005d0 <main+0x2ac>)
 8000394:	f000 fd74 	bl	8000e80 <HAL_GPIO_WritePin>
 8000398:	e05e      	b.n	8000458 <main+0x134>
			  } else if (onBoardLEDNumber == 1) {
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d10c      	bne.n	80003ba <main+0x96>
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a6:	488a      	ldr	r0, [pc, #552]	; (80005d0 <main+0x2ac>)
 80003a8:	f000 fd6a 	bl	8000e80 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	4887      	ldr	r0, [pc, #540]	; (80005d0 <main+0x2ac>)
 80003b4:	f000 fd64 	bl	8000e80 <HAL_GPIO_WritePin>
 80003b8:	e04e      	b.n	8000458 <main+0x134>
			  }
			  else if (onBoardLEDNumber == 2) {
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d10c      	bne.n	80003da <main+0xb6>
			  				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c6:	4882      	ldr	r0, [pc, #520]	; (80005d0 <main+0x2ac>)
 80003c8:	f000 fd5a 	bl	8000e80 <HAL_GPIO_WritePin>
			  				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d2:	487f      	ldr	r0, [pc, #508]	; (80005d0 <main+0x2ac>)
 80003d4:	f000 fd54 	bl	8000e80 <HAL_GPIO_WritePin>
 80003d8:	e03e      	b.n	8000458 <main+0x134>
			  			  }
			  else if (onBoardLEDNumber == 3) {
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d10c      	bne.n	80003fa <main+0xd6>
			  			  				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e6:	487a      	ldr	r0, [pc, #488]	; (80005d0 <main+0x2ac>)
 80003e8:	f000 fd4a 	bl	8000e80 <HAL_GPIO_WritePin>
			  			  				  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f2:	4877      	ldr	r0, [pc, #476]	; (80005d0 <main+0x2ac>)
 80003f4:	f000 fd44 	bl	8000e80 <HAL_GPIO_WritePin>
 80003f8:	e02e      	b.n	8000458 <main+0x134>
			  			  			  }
			  else if (onBoardLEDNumber == 4) {
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d10c      	bne.n	800041a <main+0xf6>
			  			  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000406:	4872      	ldr	r0, [pc, #456]	; (80005d0 <main+0x2ac>)
 8000408:	f000 fd3a 	bl	8000e80 <HAL_GPIO_WritePin>
			  			 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000412:	486f      	ldr	r0, [pc, #444]	; (80005d0 <main+0x2ac>)
 8000414:	f000 fd34 	bl	8000e80 <HAL_GPIO_WritePin>
 8000418:	e01e      	b.n	8000458 <main+0x134>
			  			  			  			  }
			  else if (onBoardLEDNumber == 5) {
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	2b05      	cmp	r3, #5
 800041e:	d10c      	bne.n	800043a <main+0x116>
			  			  			  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000426:	486a      	ldr	r0, [pc, #424]	; (80005d0 <main+0x2ac>)
 8000428:	f000 fd2a 	bl	8000e80 <HAL_GPIO_WritePin>
			  			  			 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000432:	4867      	ldr	r0, [pc, #412]	; (80005d0 <main+0x2ac>)
 8000434:	f000 fd24 	bl	8000e80 <HAL_GPIO_WritePin>
 8000438:	e00e      	b.n	8000458 <main+0x134>
			  			  			  			  			  }
			  else if (onBoardLEDNumber == 6) {
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	2b06      	cmp	r3, #6
 800043e:	d10b      	bne.n	8000458 <main+0x134>
			  			  			  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000446:	4862      	ldr	r0, [pc, #392]	; (80005d0 <main+0x2ac>)
 8000448:	f000 fd1a 	bl	8000e80 <HAL_GPIO_WritePin>
			  			  			 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15, 1);
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000452:	485f      	ldr	r0, [pc, #380]	; (80005d0 <main+0x2ac>)
 8000454:	f000 fd14 	bl	8000e80 <HAL_GPIO_WritePin>
			  			  			  			  			  }


		  }

		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045e:	485d      	ldr	r0, [pc, #372]	; (80005d4 <main+0x2b0>)
 8000460:	f000 fd0e 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046a:	485a      	ldr	r0, [pc, #360]	; (80005d4 <main+0x2b0>)
 800046c:	f000 fd08 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000476:	4857      	ldr	r0, [pc, #348]	; (80005d4 <main+0x2b0>)
 8000478:	f000 fd02 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000482:	4854      	ldr	r0, [pc, #336]	; (80005d4 <main+0x2b0>)
 8000484:	f000 fcfc 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048e:	4851      	ldr	r0, [pc, #324]	; (80005d4 <main+0x2b0>)
 8000490:	f000 fcf6 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	484e      	ldr	r0, [pc, #312]	; (80005d4 <main+0x2b0>)
 800049c:	f000 fcf0 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a6:	484b      	ldr	r0, [pc, #300]	; (80005d4 <main+0x2b0>)
 80004a8:	f000 fcea 	bl	8000e80 <HAL_GPIO_WritePin>

		  HAL_Delay(300);
 80004ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004b0:	f000 fa4a 	bl	8000948 <HAL_Delay>
		  SevenSegemnt sev = ZeroNumberSevenSegment;
 80004b4:	4b48      	ldr	r3, [pc, #288]	; (80005d8 <main+0x2b4>)
 80004b6:	463c      	mov	r4, r7
 80004b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ba:	c407      	stmia	r4!, {r0, r1, r2}
 80004bc:	8023      	strh	r3, [r4, #0]

		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2101      	movs	r1, #1
 80004c2:	4846      	ldr	r0, [pc, #280]	; (80005dc <main+0x2b8>)
 80004c4:	f000 fcdc 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2102      	movs	r1, #2
 80004cc:	4843      	ldr	r0, [pc, #268]	; (80005dc <main+0x2b8>)
 80004ce:	f000 fcd7 	bl	8000e80 <HAL_GPIO_WritePin>

		  if (counter == 0) {
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10a      	bne.n	80004ee <main+0x1ca>
			  sev = ZeroNumberSevenSegment;
 80004d8:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <main+0x2b4>)
 80004da:	463c      	mov	r4, r7
 80004dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004de:	c407      	stmia	r4!, {r0, r1, r2}
 80004e0:	8023      	strh	r3, [r4, #0]
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	483d      	ldr	r0, [pc, #244]	; (80005dc <main+0x2b8>)
 80004e8:	f000 fcca 	bl	8000e80 <HAL_GPIO_WritePin>
 80004ec:	e095      	b.n	800061a <main+0x2f6>
		  }
		  else if (counter == 1) {
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10a      	bne.n	800050a <main+0x1e6>
			  sev = OneNumberSevenSegment;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <main+0x2bc>)
 80004f6:	463c      	mov	r4, r7
 80004f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004fa:	c407      	stmia	r4!, {r0, r1, r2}
 80004fc:	8023      	strh	r3, [r4, #0]
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	4836      	ldr	r0, [pc, #216]	; (80005dc <main+0x2b8>)
 8000504:	f000 fcbc 	bl	8000e80 <HAL_GPIO_WritePin>
 8000508:	e087      	b.n	800061a <main+0x2f6>
		  }
		  else if (counter == 2) {
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d10a      	bne.n	8000526 <main+0x202>
		  	  sev = TwoNumberSevenSegment;
 8000510:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <main+0x2c0>)
 8000512:	463c      	mov	r4, r7
 8000514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000516:	c407      	stmia	r4!, {r0, r1, r2}
 8000518:	8023      	strh	r3, [r4, #0]
		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2101      	movs	r1, #1
 800051e:	482f      	ldr	r0, [pc, #188]	; (80005dc <main+0x2b8>)
 8000520:	f000 fcae 	bl	8000e80 <HAL_GPIO_WritePin>
 8000524:	e079      	b.n	800061a <main+0x2f6>
		  }
		  else if (counter == 3) {
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d10a      	bne.n	8000542 <main+0x21e>
		  	  sev = ThreeNumberSevenSegment;
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <main+0x2c4>)
 800052e:	463c      	mov	r4, r7
 8000530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000532:	c407      	stmia	r4!, {r0, r1, r2}
 8000534:	8023      	strh	r3, [r4, #0]
		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	2102      	movs	r1, #2
 800053a:	4828      	ldr	r0, [pc, #160]	; (80005dc <main+0x2b8>)
 800053c:	f000 fca0 	bl	8000e80 <HAL_GPIO_WritePin>
 8000540:	e06b      	b.n	800061a <main+0x2f6>
		  }
		  else if (counter == 4) {
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	2b04      	cmp	r3, #4
 8000546:	d10a      	bne.n	800055e <main+0x23a>
		  		  	  sev = FourNumberSevenSegment;
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x2c8>)
 800054a:	463c      	mov	r4, r7
 800054c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054e:	c407      	stmia	r4!, {r0, r1, r2}
 8000550:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	2101      	movs	r1, #1
 8000556:	4821      	ldr	r0, [pc, #132]	; (80005dc <main+0x2b8>)
 8000558:	f000 fc92 	bl	8000e80 <HAL_GPIO_WritePin>
 800055c:	e05d      	b.n	800061a <main+0x2f6>
		  		  }
		  else if (counter == 5) {
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b05      	cmp	r3, #5
 8000562:	d10a      	bne.n	800057a <main+0x256>
		  		  	  sev = FiveNumberSevenSegment;
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <main+0x2cc>)
 8000566:	463c      	mov	r4, r7
 8000568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056a:	c407      	stmia	r4!, {r0, r1, r2}
 800056c:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	2102      	movs	r1, #2
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <main+0x2b8>)
 8000574:	f000 fc84 	bl	8000e80 <HAL_GPIO_WritePin>
 8000578:	e04f      	b.n	800061a <main+0x2f6>
		  		  }
		  else if (counter == 6) {
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b06      	cmp	r3, #6
 800057e:	d10a      	bne.n	8000596 <main+0x272>
		  		  	  sev = SixNumberSevenSegment;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <main+0x2d0>)
 8000582:	463c      	mov	r4, r7
 8000584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000586:	c407      	stmia	r4!, {r0, r1, r2}
 8000588:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	2101      	movs	r1, #1
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0x2b8>)
 8000590:	f000 fc76 	bl	8000e80 <HAL_GPIO_WritePin>
 8000594:	e041      	b.n	800061a <main+0x2f6>
		  		  }
		  else if (counter == 7) {
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b07      	cmp	r3, #7
 800059a:	d10a      	bne.n	80005b2 <main+0x28e>
		  		  	  sev = SevenNumberSevenSegment;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x2d4>)
 800059e:	463c      	mov	r4, r7
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	c407      	stmia	r4!, {r0, r1, r2}
 80005a4:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2102      	movs	r1, #2
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <main+0x2b8>)
 80005ac:	f000 fc68 	bl	8000e80 <HAL_GPIO_WritePin>
 80005b0:	e033      	b.n	800061a <main+0x2f6>
		  		  }
		  else if (counter == 8) {
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d123      	bne.n	8000600 <main+0x2dc>
		  		  	  sev = EightNumberSevenSegment;
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <main+0x2d8>)
 80005ba:	463c      	mov	r4, r7
 80005bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005be:	c407      	stmia	r4!, {r0, r1, r2}
 80005c0:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2101      	movs	r1, #1
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x2b8>)
 80005c8:	f000 fc5a 	bl	8000e80 <HAL_GPIO_WritePin>
 80005cc:	e025      	b.n	800061a <main+0x2f6>
 80005ce:	bf00      	nop
 80005d0:	48001000 	.word	0x48001000
 80005d4:	48000c00 	.word	0x48000c00
 80005d8:	20000000 	.word	0x20000000
 80005dc:	48000800 	.word	0x48000800
 80005e0:	20000010 	.word	0x20000010
 80005e4:	20000020 	.word	0x20000020
 80005e8:	20000030 	.word	0x20000030
 80005ec:	20000040 	.word	0x20000040
 80005f0:	20000050 	.word	0x20000050
 80005f4:	20000060 	.word	0x20000060
 80005f8:	20000070 	.word	0x20000070
 80005fc:	20000080 	.word	0x20000080
		  		  }
		  else if (counter == 9) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b09      	cmp	r3, #9
 8000604:	d109      	bne.n	800061a <main+0x2f6>
		  		  	  sev = NineNumberSevenSegment;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <main+0x368>)
 8000608:	463c      	mov	r4, r7
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	c407      	stmia	r4!, {r0, r1, r2}
 800060e:	8023      	strh	r3, [r4, #0]
		  		  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	2102      	movs	r1, #2
 8000614:	481e      	ldr	r0, [pc, #120]	; (8000690 <main+0x36c>)
 8000616:	f000 fc33 	bl	8000e80 <HAL_GPIO_WritePin>
		  		  }


		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8, sev.A);
 800061a:	883b      	ldrh	r3, [r7, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <main+0x370>)
 8000626:	f000 fc2b 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9, sev.B);
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0x370>)
 8000636:	f000 fc23 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10, sev.C);
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0x370>)
 8000646:	f000 fc1b 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11, sev.D);
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	480f      	ldr	r0, [pc, #60]	; (8000694 <main+0x370>)
 8000656:	f000 fc13 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12, sev.E);
 800065a:	893b      	ldrh	r3, [r7, #8]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	461a      	mov	r2, r3
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0x370>)
 8000666:	f000 fc0b 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13, sev.F);
 800066a:	897b      	ldrh	r3, [r7, #10]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x370>)
 8000676:	f000 fc03 	bl	8000e80 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, sev.G);
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x370>)
 8000686:	f000 fbfb 	bl	8000e80 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 800068a:	e65e      	b.n	800034a <main+0x26>
 800068c:	20000090 	.word	0x20000090
 8000690:	48000800 	.word	0x48000800
 8000694:	48000c00 	.word	0x48000c00

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09e      	sub	sp, #120	; 0x78
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006a2:	2228      	movs	r2, #40	; 0x28
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fffa 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	223c      	movs	r2, #60	; 0x3c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 ffec 	bl	80026a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c8:	2303      	movs	r3, #3
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2310      	movs	r3, #16
 80006dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006ec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fbdc 	bl	8000eb0 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006fe:	f000 f82d 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fc04 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072a:	f000 f817 	bl	800075c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <SystemClock_Config+0xc0>)
 8000730:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fdda 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800074a:	f000 f807 	bl	800075c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3778      	adds	r7, #120	; 0x78
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	00020020 	.word	0x00020020

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x44>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f884 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490e      	ldr	r1, [pc, #56]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0b      	ldr	r4, [pc, #44]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffd7 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f001 feff 	bl	8002658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fd63 	bl	8000324 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800086c:	08002700 	.word	0x08002700
  ldr r2, =_sbss
 8000870:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000874:	200000cc 	.word	0x200000cc

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f931 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff ff66 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f93b 	bl	8000b42 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e4:	f000 f911 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000a0 	.word	0x200000a0
 8000900:	200000a8 	.word	0x200000a8
 8000904:	200000a4 	.word	0x200000a4

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000a8 	.word	0x200000a8
 800092c:	200000c8 	.word	0x200000c8

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200000c8 	.word	0x200000c8

08000948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000a8 	.word	0x200000a8

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff47 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff5c 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff8e 	bl	8000a48 <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb0 	bl	8000ab0 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6a:	e154      	b.n	8000e16 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8146 	beq.w	8000e10 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d005      	beq.n	8000b9c <HAL_GPIO_Init+0x40>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d130      	bne.n	8000bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	f003 0201 	and.w	r2, r3, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d017      	beq.n	8000c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d123      	bne.n	8000c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	6939      	ldr	r1, [r7, #16]
 8000c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0203 	and.w	r2, r3, #3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80a0 	beq.w	8000e10 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <HAL_GPIO_Init+0x2d8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_GPIO_Init+0x2d8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_GPIO_Init+0x2d8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce8:	4a53      	ldr	r2, [pc, #332]	; (8000e38 <HAL_GPIO_Init+0x2dc>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d12:	d019      	beq.n	8000d48 <HAL_GPIO_Init+0x1ec>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_GPIO_Init+0x2e0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d013      	beq.n	8000d44 <HAL_GPIO_Init+0x1e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2e4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d00d      	beq.n	8000d40 <HAL_GPIO_Init+0x1e4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d007      	beq.n	8000d3c <HAL_GPIO_Init+0x1e0>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <HAL_GPIO_Init+0x2ec>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d101      	bne.n	8000d38 <HAL_GPIO_Init+0x1dc>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e008      	b.n	8000d4a <HAL_GPIO_Init+0x1ee>
 8000d38:	2305      	movs	r3, #5
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x1ee>
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e004      	b.n	8000d4a <HAL_GPIO_Init+0x1ee>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e002      	b.n	8000d4a <HAL_GPIO_Init+0x1ee>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <HAL_GPIO_Init+0x1ee>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	f002 0203 	and.w	r2, r2, #3
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	4093      	lsls	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5a:	4937      	ldr	r1, [pc, #220]	; (8000e38 <HAL_GPIO_Init+0x2dc>)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de0:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f47f aea3 	bne.w	8000b6c <HAL_GPIO_Init+0x10>
  }
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	48001000 	.word	0x48001000
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f001 b823 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 817d 	beq.w	80011e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eec:	4bbc      	ldr	r3, [pc, #752]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d00c      	beq.n	8000f12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef8:	4bb9      	ldr	r3, [pc, #740]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d15c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x10e>
 8000f04:	4bb6      	ldr	r3, [pc, #728]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f10:	d155      	bne.n	8000fbe <HAL_RCC_OscConfig+0x10e>
 8000f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f16:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2a:	fab3 f383 	clz	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d102      	bne.n	8000f44 <HAL_RCC_OscConfig+0x94>
 8000f3e:	4ba8      	ldr	r3, [pc, #672]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	e015      	b.n	8000f70 <HAL_RCC_OscConfig+0xc0>
 8000f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f48:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f6c:	4b9c      	ldr	r3, [pc, #624]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f74:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f78:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f7c:	fa92 f2a2 	rbit	r2, r2
 8000f80:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f84:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	f002 021f 	and.w	r2, r2, #31
 8000f98:	2101      	movs	r1, #1
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 811f 	beq.w	80011e4 <HAL_RCC_OscConfig+0x334>
 8000fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 8116 	bne.w	80011e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f000 bfaf 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x12e>
 8000fd0:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a82      	ldr	r2, [pc, #520]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e036      	b.n	800104c <HAL_RCC_OscConfig+0x19c>
 8000fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x158>
 8000fee:	4b7c      	ldr	r3, [pc, #496]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7b      	ldr	r2, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b79      	ldr	r3, [pc, #484]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a78      	ldr	r2, [pc, #480]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e021      	b.n	800104c <HAL_RCC_OscConfig+0x19c>
 8001008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x184>
 800101a:	4b71      	ldr	r3, [pc, #452]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a70      	ldr	r2, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6d      	ldr	r2, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0x19c>
 8001034:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800104c:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	f023 020f 	bic.w	r2, r3, #15
 8001054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	495f      	ldr	r1, [pc, #380]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001062:	4313      	orrs	r3, r2
 8001064:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d059      	beq.n	800112a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fc5b 	bl	8000930 <HAL_GetTick>
 800107a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	e00a      	b.n	8001096 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fc56 	bl	8000930 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b64      	cmp	r3, #100	; 0x64
 800108e:	d902      	bls.n	8001096 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	f000 bf43 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d102      	bne.n	80010c8 <HAL_RCC_OscConfig+0x218>
 80010c2:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	e015      	b.n	80010f4 <HAL_RCC_OscConfig+0x244>
 80010c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001100:	fa92 f2a2 	rbit	r2, r2
 8001104:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001108:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	f042 0220 	orr.w	r2, r2, #32
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f002 021f 	and.w	r2, r2, #31
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0ab      	beq.n	8001080 <HAL_RCC_OscConfig+0x1d0>
 8001128:	e05d      	b.n	80011e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fc01 	bl	8000930 <HAL_GetTick>
 800112e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e00a      	b.n	800114a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fbfc 	bl	8000930 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d902      	bls.n	800114a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	f000 bee9 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 800114a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800115e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	095b      	lsrs	r3, r3, #5
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x2cc>
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	e015      	b.n	80011a8 <HAL_RCC_OscConfig+0x2f8>
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001194:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001198:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_RCC_OscConfig+0x330>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011b4:	fa92 f2a2 	rbit	r2, r2
 80011b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011c0:	fab2 f282 	clz	r2, r2
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f042 0220 	orr.w	r2, r2, #32
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f002 021f 	and.w	r2, r2, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ab      	bne.n	8001134 <HAL_RCC_OscConfig+0x284>
 80011dc:	e003      	b.n	80011e6 <HAL_RCC_OscConfig+0x336>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 817d 	beq.w	80014f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011fc:	4ba6      	ldr	r3, [pc, #664]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001208:	4ba3      	ldr	r3, [pc, #652]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d172      	bne.n	80012fa <HAL_RCC_OscConfig+0x44a>
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d16c      	bne.n	80012fa <HAL_RCC_OscConfig+0x44a>
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001232:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x3a0>
 800124a:	4b93      	ldr	r3, [pc, #588]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	e013      	b.n	8001278 <HAL_RCC_OscConfig+0x3c8>
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001268:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2202      	movs	r2, #2
 800127a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800127e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001282:	fa92 f2a2 	rbit	r2, r2
 8001286:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800128a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800128e:	fab2 f282 	clz	r2, r2
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f002 021f 	and.w	r2, r2, #31
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <HAL_RCC_OscConfig+0x410>
 80012aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f000 be2e 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b75      	ldr	r3, [pc, #468]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	21f8      	movs	r1, #248	; 0xf8
 80012d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012de:	fa91 f1a1 	rbit	r1, r1
 80012e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012ea:	fab1 f181 	clz	r1, r1
 80012ee:	b2c9      	uxtb	r1, r1
 80012f0:	408b      	lsls	r3, r1
 80012f2:	4969      	ldr	r1, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f8:	e0fd      	b.n	80014f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8088 	beq.w	800141c <HAL_RCC_OscConfig+0x56c>
 800130c:	2301      	movs	r3, #1
 800130e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800131e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	461a      	mov	r2, r3
 8001334:	2301      	movs	r3, #1
 8001336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fafa 	bl	8000930 <HAL_GetTick>
 800133c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff faf5 	bl	8000930 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d902      	bls.n	8001358 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	f000 bde2 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800136a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	095b      	lsrs	r3, r3, #5
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x4d8>
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e013      	b.n	80013b0 <HAL_RCC_OscConfig+0x500>
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	2202      	movs	r2, #2
 80013b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013ba:	fa92 f2a2 	rbit	r2, r2
 80013be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013c6:	fab2 f282 	clz	r2, r2
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f002 021f 	and.w	r2, r2, #31
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0af      	beq.n	8001342 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	21f8      	movs	r1, #248	; 0xf8
 80013f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001400:	fa91 f1a1 	rbit	r1, r1
 8001404:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001408:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800140c:	fab1 f181 	clz	r1, r1
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	408b      	lsls	r3, r1
 8001414:	4920      	ldr	r1, [pc, #128]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
 800141a:	e06c      	b.n	80014f6 <HAL_RCC_OscConfig+0x646>
 800141c:	2301      	movs	r3, #1
 800141e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800142e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	461a      	mov	r2, r3
 8001444:	2300      	movs	r3, #0
 8001446:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fa72 	bl	8000930 <HAL_GetTick>
 800144c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fa6d 	bl	8000930 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d902      	bls.n	8001468 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	f000 bd5a 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800147a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	095b      	lsrs	r3, r3, #5
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d104      	bne.n	800149c <HAL_RCC_OscConfig+0x5ec>
 8001492:	4b01      	ldr	r3, [pc, #4]	; (8001498 <HAL_RCC_OscConfig+0x5e8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	e015      	b.n	80014c4 <HAL_RCC_OscConfig+0x614>
 8001498:	40021000 	.word	0x40021000
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014c0:	4bc8      	ldr	r3, [pc, #800]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	2202      	movs	r2, #2
 80014c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ce:	fa92 f2a2 	rbit	r2, r2
 80014d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014da:	fab2 f282 	clz	r2, r2
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f002 021f 	and.w	r2, r2, #31
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ad      	bne.n	8001452 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8110 	beq.w	800172c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d079      	beq.n	8001610 <HAL_RCC_OscConfig+0x760>
 800151c:	2301      	movs	r3, #1
 800151e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800152e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4bab      	ldr	r3, [pc, #684]	; (80017e8 <HAL_RCC_OscConfig+0x938>)
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff f9f3 	bl	8000930 <HAL_GetTick>
 800154a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff f9ee 	bl	8000930 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d902      	bls.n	8001566 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	f000 bcdb 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015a4:	2202      	movs	r2, #2
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c0:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 80015c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015cc:	2102      	movs	r1, #2
 80015ce:	6019      	str	r1, [r3, #0]
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f1a3 	rbit	r1, r3
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e6:	6019      	str	r1, [r3, #0]
  return result;
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0a0      	beq.n	8001550 <HAL_RCC_OscConfig+0x6a0>
 800160e:	e08d      	b.n	800172c <HAL_RCC_OscConfig+0x87c>
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001632:	601a      	str	r2, [r3, #0]
  return result;
 8001634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001638:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800163c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_OscConfig+0x938>)
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	461a      	mov	r2, r3
 800164e:	2300      	movs	r3, #0
 8001650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff f96d 	bl	8000930 <HAL_GetTick>
 8001656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff f968 	bl	8000930 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d902      	bls.n	8001672 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	f000 bc55 	b.w	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800167a:	2202      	movs	r2, #2
 800167c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ea:	2102      	movs	r1, #2
 80016ec:	6019      	str	r1, [r3, #0]
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f1a3 	rbit	r1, r3
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001704:	6019      	str	r1, [r3, #0]
  return result;
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d197      	bne.n	800165c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 81a1 	beq.w	8001a84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800177a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_RCC_OscConfig+0x93c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_RCC_OscConfig+0x93c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <HAL_RCC_OscConfig+0x93c>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff f8c9 	bl	8000930 <HAL_GetTick>
 800179e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	e009      	b.n	80017b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a4:	f7ff f8c4 	bl	8000930 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e3b1      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_OscConfig+0x93c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10d      	bne.n	80017f0 <HAL_RCC_OscConfig+0x940>
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a02      	ldr	r2, [pc, #8]	; (80017e4 <HAL_RCC_OscConfig+0x934>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e03c      	b.n	800185c <HAL_RCC_OscConfig+0x9ac>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	10908120 	.word	0x10908120
 80017ec:	40007000 	.word	0x40007000
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x96a>
 8001800:	4bc1      	ldr	r3, [pc, #772]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4ac0      	ldr	r2, [pc, #768]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	4bbe      	ldr	r3, [pc, #760]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4abd      	ldr	r2, [pc, #756]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e020      	b.n	800185c <HAL_RCC_OscConfig+0x9ac>
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x994>
 800182a:	4bb7      	ldr	r3, [pc, #732]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4ab6      	ldr	r2, [pc, #728]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4bb4      	ldr	r3, [pc, #720]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4ab3      	ldr	r2, [pc, #716]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6213      	str	r3, [r2, #32]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x9ac>
 8001844:	4bb0      	ldr	r3, [pc, #704]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4aaf      	ldr	r2, [pc, #700]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4bad      	ldr	r3, [pc, #692]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4aac      	ldr	r2, [pc, #688]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8081 	beq.w	8001970 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff f85f 	bl	8000930 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff f85a 	bl	8000930 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e345      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d6:	601a      	str	r2, [r3, #0]
  return result;
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0xa4c>
 80018f6:	4b84      	ldr	r3, [pc, #528]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0xa74>
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001928:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800192c:	2102      	movs	r1, #2
 800192e:	6011      	str	r1, [r2, #0]
 8001930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001934:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	fa92 f1a2 	rbit	r1, r2
 800193e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001942:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001946:	6011      	str	r1, [r2, #0]
  return result;
 8001948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	fab2 f282 	clz	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f002 021f 	and.w	r2, r2, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d084      	beq.n	8001878 <HAL_RCC_OscConfig+0x9c8>
 800196e:	e07f      	b.n	8001a70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe ffde 	bl	8000930 <HAL_GetTick>
 8001974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7fe ffd9 	bl	8000930 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e2c4      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0xb4e>
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0xb76>
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	fa92 f1a2 	rbit	r1, r2
 8001a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a48:	6011      	str	r1, [r2, #0]
  return result;
 8001a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	fab2 f282 	clz	r2, r2
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f002 021f 	and.w	r2, r2, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d184      	bne.n	800197a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8242 	beq.w	8001f1a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <HAL_RCC_OscConfig+0xc58>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	f000 8213 	beq.w	8001eca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f040 8162 	bne.w	8001d7a <HAL_RCC_OscConfig+0xeca>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ae4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7fe ff18 	bl	8000930 <HAL_GetTick>
 8001b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e00c      	b.n	8001b20 <HAL_RCC_OscConfig+0xc70>
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7fe ff10 	bl	8000930 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1fd      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b44:	601a      	str	r2, [r3, #0]
  return result;
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_OscConfig+0xcba>
 8001b64:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	e027      	b.n	8001bba <HAL_RCC_OscConfig+0xd0a>
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bbe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc6:	6011      	str	r1, [r2, #0]
 8001bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bcc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	fa92 f1a2 	rbit	r1, r2
 8001bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bda:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bde:	6011      	str	r1, [r2, #0]
  return result;
 8001be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d182      	bne.n	8001b0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	497f      	ldr	r1, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe fe5c 	bl	8000930 <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe fe57 	bl	8000930 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e144      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe2c>
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e027      	b.n	8001d2c <HAL_RCC_OscConfig+0xe7c>
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fa92 f1a2 	rbit	r1, r2
 8001d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d50:	6011      	str	r1, [r2, #0]
  return result;
 8001d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d082      	beq.n	8001c7e <HAL_RCC_OscConfig+0xdce>
 8001d78:	e0cf      	b.n	8001f1a <HAL_RCC_OscConfig+0x106a>
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001da8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fdb6 	bl	8000930 <HAL_GetTick>
 8001dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe fdb1 	bl	8000930 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e09e      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e02:	601a      	str	r2, [r3, #0]
  return result;
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d104      	bne.n	8001e2c <HAL_RCC_OscConfig+0xf7c>
 8001e22:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <HAL_RCC_OscConfig+0xf78>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e029      	b.n	8001e7c <HAL_RCC_OscConfig+0xfcc>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x1078>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fa92 f1a2 	rbit	r1, r2
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d180      	bne.n	8001dca <HAL_RCC_OscConfig+0xf1a>
 8001ec8:	e027      	b.n	8001f1a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e01e      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x1078>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ee6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001efe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09e      	sub	sp, #120	; 0x78
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e162      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b90      	ldr	r3, [pc, #576]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d910      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b8d      	ldr	r3, [pc, #564]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 0207 	bic.w	r2, r3, #7
 8001f5a:	498b      	ldr	r1, [pc, #556]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b89      	ldr	r3, [pc, #548]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e14a      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b82      	ldr	r3, [pc, #520]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	497f      	ldr	r1, [pc, #508]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80dc 	beq.w	8002158 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d13c      	bne.n	8002022 <HAL_RCC_ClockConfig+0xf6>
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xa6>
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e00f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0xc6>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	667b      	str	r3, [r7, #100]	; 0x64
 8001fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ff6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d17b      	bne.n	8002116 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0f3      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d13c      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x178>
 800202a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_RCC_ClockConfig+0x128>
 800204e:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e00f      	b.n	8002074 <HAL_RCC_ClockConfig+0x148>
 8002054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002058:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	647b      	str	r3, [r7, #68]	; 0x44
 8002062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
 8002068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002078:	63ba      	str	r2, [r7, #56]	; 0x38
 800207a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d13a      	bne.n	8002116 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b2      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
 80020a4:	2302      	movs	r3, #2
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1a0>
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e00d      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1bc>
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2202      	movs	r2, #2
 80020ea:	61ba      	str	r2, [r7, #24]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	fa92 f2a2 	rbit	r2, r2
 80020f2:	617a      	str	r2, [r7, #20]
  return result;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e079      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	491a      	ldr	r1, [pc, #104]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7fe fc02 	bl	8000930 <HAL_GetTick>
 800212c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe fbfe 	bl	8000930 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e061      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_ClockConfig+0x260>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d214      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4906      	ldr	r1, [pc, #24]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCC_ClockConfig+0x25c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e040      	b.n	800220a <HAL_RCC_ClockConfig+0x2de>
 8002188:	40022000 	.word	0x40022000
 800218c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_ClockConfig+0x2e8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	491a      	ldr	r1, [pc, #104]	; (8002214 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_RCC_ClockConfig+0x2e8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4912      	ldr	r1, [pc, #72]	; (8002214 <HAL_RCC_ClockConfig+0x2e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ce:	f000 f829 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021d2:	4601      	mov	r1, r0
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021dc:	22f0      	movs	r2, #240	; 0xf0
 80021de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	60fa      	str	r2, [r7, #12]
  return result;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	40d3      	lsrs	r3, r2
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x2ec>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	fa21 f303 	lsr.w	r3, r1, r3
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x2f0>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_ClockConfig+0x2f4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fb50 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3778      	adds	r7, #120	; 0x78
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	080026c8 	.word	0x080026c8
 800221c:	200000a0 	.word	0x200000a0
 8002220:	200000a4 	.word	0x200000a4

08002224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b08b      	sub	sp, #44	; 0x2c
 8002228:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x30>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x36>
 8002252:	e03c      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e03c      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002260:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002264:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	607a      	str	r2, [r7, #4]
  return result;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	40d3      	lsrs	r3, r2
 8002278:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	220f      	movs	r2, #15
 8002288:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	60fa      	str	r2, [r7, #12]
  return result;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	40d3      	lsrs	r3, r2
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	e004      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	623b      	str	r3, [r7, #32]
      break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d0:	623b      	str	r3, [r7, #32]
      break;
 80022d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	007a1200 	.word	0x007a1200
 80022ec:	080026d8 	.word	0x080026d8
 80022f0:	080026e8 	.word	0x080026e8
 80022f4:	003d0900 	.word	0x003d0900

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b092      	sub	sp, #72	; 0x48
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80d4 	beq.w	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a4a      	ldr	r2, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
 8002334:	4b48      	ldr	r3, [pc, #288]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b42      	ldr	r3, [pc, #264]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a41      	ldr	r2, [pc, #260]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fae7 	bl	8000930 <HAL_GetTick>
 8002362:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fae3 	bl	8000930 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e169      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002384:	4b34      	ldr	r3, [pc, #208]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8084 	beq.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d07c      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2301      	movs	r3, #1
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	2300      	movs	r3, #0
 80023f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d04b      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fa93 	bl	8000930 <HAL_GetTick>
 800240a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fa8f 	bl	8000930 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e113      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002424:	2302      	movs	r3, #2
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	61fb      	str	r3, [r7, #28]
  return result;
 800243c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d108      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002452:	4b01      	ldr	r3, [pc, #4]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	e00d      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	10908100 	.word	0x10908100
 8002464:	2302      	movs	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	4b78      	ldr	r3, [pc, #480]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2202      	movs	r2, #2
 8002476:	613a      	str	r2, [r7, #16]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	fa92 f2a2 	rbit	r2, r2
 800247e:	60fa      	str	r2, [r7, #12]
  return result;
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0b7      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800249e:	4b6d      	ldr	r3, [pc, #436]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	496a      	ldr	r1, [pc, #424]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a65      	ldr	r2, [pc, #404]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d0:	4b60      	ldr	r3, [pc, #384]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f023 0203 	bic.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	495d      	ldr	r1, [pc, #372]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ee:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4956      	ldr	r1, [pc, #344]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250c:	4b51      	ldr	r3, [pc, #324]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	494e      	ldr	r1, [pc, #312]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f023 0210 	bic.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4947      	ldr	r1, [pc, #284]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002548:	4b42      	ldr	r3, [pc, #264]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	493f      	ldr	r1, [pc, #252]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f023 0220 	bic.w	r2, r3, #32
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4938      	ldr	r1, [pc, #224]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	4930      	ldr	r1, [pc, #192]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4929      	ldr	r1, [pc, #164]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	4921      	ldr	r1, [pc, #132]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	4912      	ldr	r1, [pc, #72]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800260a:	4313      	orrs	r3, r2
 800260c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	490b      	ldr	r1, [pc, #44]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3748      	adds	r7, #72	; 0x48
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <__libc_init_array>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	4d0d      	ldr	r5, [pc, #52]	; (8002690 <__libc_init_array+0x38>)
 800265c:	4c0d      	ldr	r4, [pc, #52]	; (8002694 <__libc_init_array+0x3c>)
 800265e:	1b64      	subs	r4, r4, r5
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	2600      	movs	r6, #0
 8002664:	42a6      	cmp	r6, r4
 8002666:	d109      	bne.n	800267c <__libc_init_array+0x24>
 8002668:	4d0b      	ldr	r5, [pc, #44]	; (8002698 <__libc_init_array+0x40>)
 800266a:	4c0c      	ldr	r4, [pc, #48]	; (800269c <__libc_init_array+0x44>)
 800266c:	f000 f820 	bl	80026b0 <_init>
 8002670:	1b64      	subs	r4, r4, r5
 8002672:	10a4      	asrs	r4, r4, #2
 8002674:	2600      	movs	r6, #0
 8002676:	42a6      	cmp	r6, r4
 8002678:	d105      	bne.n	8002686 <__libc_init_array+0x2e>
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002680:	4798      	blx	r3
 8002682:	3601      	adds	r6, #1
 8002684:	e7ee      	b.n	8002664 <__libc_init_array+0xc>
 8002686:	f855 3b04 	ldr.w	r3, [r5], #4
 800268a:	4798      	blx	r3
 800268c:	3601      	adds	r6, #1
 800268e:	e7f2      	b.n	8002676 <__libc_init_array+0x1e>
 8002690:	080026f8 	.word	0x080026f8
 8002694:	080026f8 	.word	0x080026f8
 8002698:	080026f8 	.word	0x080026f8
 800269c:	080026fc 	.word	0x080026fc

080026a0 <memset>:
 80026a0:	4402      	add	r2, r0
 80026a2:	4603      	mov	r3, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
